{
  "version": 3,
  "sources": ["../../rot-js/lib/rng.js", "../../rot-js/lib/display/backend.js", "../../rot-js/lib/display/canvas.js", "../../rot-js/lib/util.js", "../../rot-js/lib/display/hex.js", "../../rot-js/lib/display/rect.js", "../../rot-js/lib/display/tile.js", "../../rot-js/lib/color.js", "../../rot-js/lib/display/tile-gl.js", "../../rot-js/lib/display/term.js", "../../rot-js/lib/text.js", "../../rot-js/lib/constants.js", "../../rot-js/lib/display/display.js", "../../rot-js/lib/stringgenerator.js", "../../rot-js/lib/MinHeap.js", "../../rot-js/lib/eventqueue.js", "../../rot-js/lib/scheduler/scheduler.js", "../../rot-js/lib/scheduler/simple.js", "../../rot-js/lib/scheduler/speed.js", "../../rot-js/lib/scheduler/action.js", "../../rot-js/lib/scheduler/index.js", "../../rot-js/lib/fov/fov.js", "../../rot-js/lib/fov/discrete-shadowcasting.js", "../../rot-js/lib/fov/precise-shadowcasting.js", "../../rot-js/lib/fov/recursive-shadowcasting.js", "../../rot-js/lib/fov/index.js", "../../rot-js/lib/map/map.js", "../../rot-js/lib/map/arena.js", "../../rot-js/lib/map/dungeon.js", "../../rot-js/lib/map/features.js", "../../rot-js/lib/map/uniform.js", "../../rot-js/lib/map/cellular.js", "../../rot-js/lib/map/digger.js", "../../rot-js/lib/map/ellermaze.js", "../../rot-js/lib/map/dividedmaze.js", "../../rot-js/lib/map/iceymaze.js", "../../rot-js/lib/map/rogue.js", "../../rot-js/lib/map/index.js", "../../rot-js/lib/noise/noise.js", "../../rot-js/lib/noise/simplex.js", "../../rot-js/lib/noise/index.js", "../../rot-js/lib/path/path.js", "../../rot-js/lib/path/dijkstra.js", "../../rot-js/lib/path/astar.js", "../../rot-js/lib/path/index.js", "../../rot-js/lib/engine.js", "../../rot-js/lib/lighting.js", "../../rot-js/lib/index.js"],
  "sourcesContent": ["/**\n * This code is an implementation of Alea algorithm; (C) 2010 Johannes Baag√∏e.\n * Alea is licensed according to the http://en.wikipedia.org/wiki/MIT_License.\n */\nconst FRAC = 2.3283064365386963e-10; /* 2^-32 */\nclass RNG {\n    constructor() {\n        this._seed = 0;\n        this._s0 = 0;\n        this._s1 = 0;\n        this._s2 = 0;\n        this._c = 0;\n    }\n    getSeed() { return this._seed; }\n    /**\n     * Seed the number generator\n     */\n    setSeed(seed) {\n        seed = (seed < 1 ? 1 / seed : seed);\n        this._seed = seed;\n        this._s0 = (seed >>> 0) * FRAC;\n        seed = (seed * 69069 + 1) >>> 0;\n        this._s1 = seed * FRAC;\n        seed = (seed * 69069 + 1) >>> 0;\n        this._s2 = seed * FRAC;\n        this._c = 1;\n        return this;\n    }\n    /**\n     * @returns Pseudorandom value [0,1), uniformly distributed\n     */\n    getUniform() {\n        let t = 2091639 * this._s0 + this._c * FRAC;\n        this._s0 = this._s1;\n        this._s1 = this._s2;\n        this._c = t | 0;\n        this._s2 = t - this._c;\n        return this._s2;\n    }\n    /**\n     * @param lowerBound The lower end of the range to return a value from, inclusive\n     * @param upperBound The upper end of the range to return a value from, inclusive\n     * @returns Pseudorandom value [lowerBound, upperBound], using ROT.RNG.getUniform() to distribute the value\n     */\n    getUniformInt(lowerBound, upperBound) {\n        let max = Math.max(lowerBound, upperBound);\n        let min = Math.min(lowerBound, upperBound);\n        return Math.floor(this.getUniform() * (max - min + 1)) + min;\n    }\n    /**\n     * @param mean Mean value\n     * @param stddev Standard deviation. ~95% of the absolute values will be lower than 2*stddev.\n     * @returns A normally distributed pseudorandom value\n     */\n    getNormal(mean = 0, stddev = 1) {\n        let u, v, r;\n        do {\n            u = 2 * this.getUniform() - 1;\n            v = 2 * this.getUniform() - 1;\n            r = u * u + v * v;\n        } while (r > 1 || r == 0);\n        let gauss = u * Math.sqrt(-2 * Math.log(r) / r);\n        return mean + gauss * stddev;\n    }\n    /**\n     * @returns Pseudorandom value [1,100] inclusive, uniformly distributed\n     */\n    getPercentage() {\n        return 1 + Math.floor(this.getUniform() * 100);\n    }\n    /**\n     * @returns Randomly picked item, null when length=0\n     */\n    getItem(array) {\n        if (!array.length) {\n            return null;\n        }\n        return array[Math.floor(this.getUniform() * array.length)];\n    }\n    /**\n     * @returns New array with randomized items\n     */\n    shuffle(array) {\n        let result = [];\n        let clone = array.slice();\n        while (clone.length) {\n            let index = clone.indexOf(this.getItem(clone));\n            result.push(clone.splice(index, 1)[0]);\n        }\n        return result;\n    }\n    /**\n     * @param data key=whatever, value=weight (relative probability)\n     * @returns whatever\n     */\n    getWeightedValue(data) {\n        let total = 0;\n        for (let id in data) {\n            total += data[id];\n        }\n        let random = this.getUniform() * total;\n        let id, part = 0;\n        for (id in data) {\n            part += data[id];\n            if (random < part) {\n                return id;\n            }\n        }\n        // If by some floating-point annoyance we have\n        // random >= total, just return the last id.\n        return id;\n    }\n    /**\n     * Get RNG state. Useful for storing the state and re-setting it via setState.\n     * @returns Internal state\n     */\n    getState() { return [this._s0, this._s1, this._s2, this._c]; }\n    /**\n     * Set a previously retrieved state.\n     */\n    setState(state) {\n        this._s0 = state[0];\n        this._s1 = state[1];\n        this._s2 = state[2];\n        this._c = state[3];\n        return this;\n    }\n    /**\n     * Returns a cloned RNG\n     */\n    clone() {\n        let clone = new RNG();\n        return clone.setState(this.getState());\n    }\n}\nexport default new RNG().setSeed(Date.now());\n", "/**\n * @class Abstract display backend module\n * @private\n */\nexport default class Backend {\n    getContainer() { return null; }\n    setOptions(options) { this._options = options; }\n}\n", "import Backend from \"./backend.js\";\nexport default class Canvas extends Backend {\n    constructor() {\n        super();\n        this._ctx = document.createElement(\"canvas\").getContext(\"2d\");\n    }\n    schedule(cb) { requestAnimationFrame(cb); }\n    getContainer() { return this._ctx.canvas; }\n    setOptions(opts) {\n        super.setOptions(opts);\n        const style = (opts.fontStyle ? `${opts.fontStyle} ` : ``);\n        const font = `${style} ${opts.fontSize}px ${opts.fontFamily}`;\n        this._ctx.font = font;\n        this._updateSize();\n        this._ctx.font = font;\n        this._ctx.textAlign = \"center\";\n        this._ctx.textBaseline = \"middle\";\n    }\n    clear() {\n        const oldComposite = this._ctx.globalCompositeOperation;\n        this._ctx.globalCompositeOperation = \"copy\";\n        this._ctx.fillStyle = this._options.bg;\n        this._ctx.fillRect(0, 0, this._ctx.canvas.width, this._ctx.canvas.height);\n        this._ctx.globalCompositeOperation = oldComposite;\n    }\n    eventToPosition(x, y) {\n        let canvas = this._ctx.canvas;\n        let rect = canvas.getBoundingClientRect();\n        x -= rect.left;\n        y -= rect.top;\n        x *= canvas.width / rect.width;\n        y *= canvas.height / rect.height;\n        if (x < 0 || y < 0 || x >= canvas.width || y >= canvas.height) {\n            return [-1, -1];\n        }\n        return this._normalizedEventToPosition(x, y);\n    }\n}\n", "/**\n * Always positive modulus\n * @param x Operand\n * @param n Modulus\n * @returns x modulo n\n */\nexport function mod(x, n) {\n    return (x % n + n) % n;\n}\nexport function clamp(val, min = 0, max = 1) {\n    if (val < min)\n        return min;\n    if (val > max)\n        return max;\n    return val;\n}\nexport function capitalize(string) {\n    return string.charAt(0).toUpperCase() + string.substring(1);\n}\n/**\n * Format a string in a flexible way. Scans for %s strings and replaces them with arguments. List of patterns is modifiable via String.format.map.\n * @param {string} template\n * @param {any} [argv]\n */\nexport function format(template, ...args) {\n    let map = format.map;\n    let replacer = function (match, group1, group2, index) {\n        if (template.charAt(index - 1) == \"%\") {\n            return match.substring(1);\n        }\n        if (!args.length) {\n            return match;\n        }\n        let obj = args[0];\n        let group = group1 || group2;\n        let parts = group.split(\",\");\n        let name = parts.shift() || \"\";\n        let method = map[name.toLowerCase()];\n        if (!method) {\n            return match;\n        }\n        obj = args.shift();\n        let replaced = obj[method].apply(obj, parts);\n        let first = name.charAt(0);\n        if (first != first.toLowerCase()) {\n            replaced = capitalize(replaced);\n        }\n        return replaced;\n    };\n    return template.replace(/%(?:([a-z]+)|(?:{([^}]+)}))/gi, replacer);\n}\nformat.map = {\n    \"s\": \"toString\"\n};\n", "import Canvas from \"./canvas.js\";\nimport { mod } from \"../util.js\";\n/**\n * @class Hexagonal backend\n * @private\n */\nexport default class Hex extends Canvas {\n    constructor() {\n        super();\n        this._spacingX = 0;\n        this._spacingY = 0;\n        this._hexSize = 0;\n    }\n    draw(data, clearBefore) {\n        let [x, y, ch, fg, bg] = data;\n        let px = [\n            (x + 1) * this._spacingX,\n            y * this._spacingY + this._hexSize\n        ];\n        if (this._options.transpose) {\n            px.reverse();\n        }\n        if (clearBefore) {\n            this._ctx.fillStyle = bg;\n            this._fill(px[0], px[1]);\n        }\n        if (!ch) {\n            return;\n        }\n        this._ctx.fillStyle = fg;\n        let chars = [].concat(ch);\n        for (let i = 0; i < chars.length; i++) {\n            this._ctx.fillText(chars[i], px[0], Math.ceil(px[1]));\n        }\n    }\n    computeSize(availWidth, availHeight) {\n        if (this._options.transpose) {\n            availWidth += availHeight;\n            availHeight = availWidth - availHeight;\n            availWidth -= availHeight;\n        }\n        let width = Math.floor(availWidth / this._spacingX) - 1;\n        let height = Math.floor((availHeight - 2 * this._hexSize) / this._spacingY + 1);\n        return [width, height];\n    }\n    computeFontSize(availWidth, availHeight) {\n        if (this._options.transpose) {\n            availWidth += availHeight;\n            availHeight = availWidth - availHeight;\n            availWidth -= availHeight;\n        }\n        let hexSizeWidth = 2 * availWidth / ((this._options.width + 1) * Math.sqrt(3)) - 1;\n        let hexSizeHeight = availHeight / (2 + 1.5 * (this._options.height - 1));\n        let hexSize = Math.min(hexSizeWidth, hexSizeHeight);\n        // compute char ratio\n        let oldFont = this._ctx.font;\n        this._ctx.font = \"100px \" + this._options.fontFamily;\n        let width = Math.ceil(this._ctx.measureText(\"W\").width);\n        this._ctx.font = oldFont;\n        let ratio = width / 100;\n        hexSize = Math.floor(hexSize) + 1; // closest larger hexSize\n        // FIXME char size computation does not respect transposed hexes\n        let fontSize = 2 * hexSize / (this._options.spacing * (1 + ratio / Math.sqrt(3)));\n        // closest smaller fontSize\n        return Math.ceil(fontSize) - 1;\n    }\n    _normalizedEventToPosition(x, y) {\n        let nodeSize;\n        if (this._options.transpose) {\n            x += y;\n            y = x - y;\n            x -= y;\n            nodeSize = this._ctx.canvas.width;\n        }\n        else {\n            nodeSize = this._ctx.canvas.height;\n        }\n        let size = nodeSize / this._options.height;\n        y = Math.floor(y / size);\n        if (mod(y, 2)) { /* odd row */\n            x -= this._spacingX;\n            x = 1 + 2 * Math.floor(x / (2 * this._spacingX));\n        }\n        else {\n            x = 2 * Math.floor(x / (2 * this._spacingX));\n        }\n        return [x, y];\n    }\n    /**\n     * Arguments are pixel values. If \"transposed\" mode is enabled, then these two are already swapped.\n     */\n    _fill(cx, cy) {\n        let a = this._hexSize;\n        let b = this._options.border;\n        const ctx = this._ctx;\n        ctx.beginPath();\n        if (this._options.transpose) {\n            ctx.moveTo(cx - a + b, cy);\n            ctx.lineTo(cx - a / 2 + b, cy + this._spacingX - b);\n            ctx.lineTo(cx + a / 2 - b, cy + this._spacingX - b);\n            ctx.lineTo(cx + a - b, cy);\n            ctx.lineTo(cx + a / 2 - b, cy - this._spacingX + b);\n            ctx.lineTo(cx - a / 2 + b, cy - this._spacingX + b);\n            ctx.lineTo(cx - a + b, cy);\n        }\n        else {\n            ctx.moveTo(cx, cy - a + b);\n            ctx.lineTo(cx + this._spacingX - b, cy - a / 2 + b);\n            ctx.lineTo(cx + this._spacingX - b, cy + a / 2 - b);\n            ctx.lineTo(cx, cy + a - b);\n            ctx.lineTo(cx - this._spacingX + b, cy + a / 2 - b);\n            ctx.lineTo(cx - this._spacingX + b, cy - a / 2 + b);\n            ctx.lineTo(cx, cy - a + b);\n        }\n        ctx.fill();\n    }\n    _updateSize() {\n        const opts = this._options;\n        const charWidth = Math.ceil(this._ctx.measureText(\"W\").width);\n        this._hexSize = Math.floor(opts.spacing * (opts.fontSize + charWidth / Math.sqrt(3)) / 2);\n        this._spacingX = this._hexSize * Math.sqrt(3) / 2;\n        this._spacingY = this._hexSize * 1.5;\n        let xprop;\n        let yprop;\n        if (opts.transpose) {\n            xprop = \"height\";\n            yprop = \"width\";\n        }\n        else {\n            xprop = \"width\";\n            yprop = \"height\";\n        }\n        this._ctx.canvas[xprop] = Math.ceil((opts.width + 1) * this._spacingX);\n        this._ctx.canvas[yprop] = Math.ceil((opts.height - 1) * this._spacingY + 2 * this._hexSize);\n    }\n}\n", "import Canvas from \"./canvas.js\";\n/**\n * @class Rectangular backend\n * @private\n */\nexport default class Rect extends Canvas {\n    constructor() {\n        super();\n        this._spacingX = 0;\n        this._spacingY = 0;\n        this._canvasCache = {};\n    }\n    setOptions(options) {\n        super.setOptions(options);\n        this._canvasCache = {};\n    }\n    draw(data, clearBefore) {\n        if (Rect.cache) {\n            this._drawWithCache(data);\n        }\n        else {\n            this._drawNoCache(data, clearBefore);\n        }\n    }\n    _drawWithCache(data) {\n        let [x, y, ch, fg, bg] = data;\n        let hash = \"\" + ch + fg + bg;\n        let canvas;\n        if (hash in this._canvasCache) {\n            canvas = this._canvasCache[hash];\n        }\n        else {\n            let b = this._options.border;\n            canvas = document.createElement(\"canvas\");\n            let ctx = canvas.getContext(\"2d\");\n            canvas.width = this._spacingX;\n            canvas.height = this._spacingY;\n            ctx.fillStyle = bg;\n            ctx.fillRect(b, b, canvas.width - b, canvas.height - b);\n            if (ch) {\n                ctx.fillStyle = fg;\n                ctx.font = this._ctx.font;\n                ctx.textAlign = \"center\";\n                ctx.textBaseline = \"middle\";\n                let chars = [].concat(ch);\n                for (let i = 0; i < chars.length; i++) {\n                    ctx.fillText(chars[i], this._spacingX / 2, Math.ceil(this._spacingY / 2));\n                }\n            }\n            this._canvasCache[hash] = canvas;\n        }\n        this._ctx.drawImage(canvas, x * this._spacingX, y * this._spacingY);\n    }\n    _drawNoCache(data, clearBefore) {\n        let [x, y, ch, fg, bg] = data;\n        if (clearBefore) {\n            let b = this._options.border;\n            this._ctx.fillStyle = bg;\n            this._ctx.fillRect(x * this._spacingX + b, y * this._spacingY + b, this._spacingX - b, this._spacingY - b);\n        }\n        if (!ch) {\n            return;\n        }\n        this._ctx.fillStyle = fg;\n        let chars = [].concat(ch);\n        for (let i = 0; i < chars.length; i++) {\n            this._ctx.fillText(chars[i], (x + 0.5) * this._spacingX, Math.ceil((y + 0.5) * this._spacingY));\n        }\n    }\n    computeSize(availWidth, availHeight) {\n        let width = Math.floor(availWidth / this._spacingX);\n        let height = Math.floor(availHeight / this._spacingY);\n        return [width, height];\n    }\n    computeFontSize(availWidth, availHeight) {\n        let boxWidth = Math.floor(availWidth / this._options.width);\n        let boxHeight = Math.floor(availHeight / this._options.height);\n        /* compute char ratio */\n        let oldFont = this._ctx.font;\n        this._ctx.font = \"100px \" + this._options.fontFamily;\n        let width = Math.ceil(this._ctx.measureText(\"W\").width);\n        this._ctx.font = oldFont;\n        let ratio = width / 100;\n        let widthFraction = ratio * boxHeight / boxWidth;\n        if (widthFraction > 1) { /* too wide with current aspect ratio */\n            boxHeight = Math.floor(boxHeight / widthFraction);\n        }\n        return Math.floor(boxHeight / this._options.spacing);\n    }\n    _normalizedEventToPosition(x, y) {\n        return [Math.floor(x / this._spacingX), Math.floor(y / this._spacingY)];\n    }\n    _updateSize() {\n        const opts = this._options;\n        const charWidth = Math.ceil(this._ctx.measureText(\"W\").width);\n        this._spacingX = Math.ceil(opts.spacing * charWidth);\n        this._spacingY = Math.ceil(opts.spacing * opts.fontSize);\n        if (opts.forceSquareRatio) {\n            this._spacingX = this._spacingY = Math.max(this._spacingX, this._spacingY);\n        }\n        this._ctx.canvas.width = opts.width * this._spacingX;\n        this._ctx.canvas.height = opts.height * this._spacingY;\n    }\n}\nRect.cache = false;\n", "import Canvas from \"./canvas.js\";\n/**\n * @class Tile backend\n * @private\n */\nexport default class Tile extends Canvas {\n    constructor() {\n        super();\n        this._colorCanvas = document.createElement(\"canvas\");\n    }\n    draw(data, clearBefore) {\n        let [x, y, ch, fg, bg] = data;\n        let tileWidth = this._options.tileWidth;\n        let tileHeight = this._options.tileHeight;\n        if (clearBefore) {\n            if (this._options.tileColorize) {\n                this._ctx.clearRect(x * tileWidth, y * tileHeight, tileWidth, tileHeight);\n            }\n            else {\n                this._ctx.fillStyle = bg;\n                this._ctx.fillRect(x * tileWidth, y * tileHeight, tileWidth, tileHeight);\n            }\n        }\n        if (!ch) {\n            return;\n        }\n        let chars = [].concat(ch);\n        let fgs = [].concat(fg);\n        let bgs = [].concat(bg);\n        for (let i = 0; i < chars.length; i++) {\n            let tile = this._options.tileMap[chars[i]];\n            if (!tile) {\n                throw new Error(`Char \"${chars[i]}\" not found in tileMap`);\n            }\n            if (this._options.tileColorize) { // apply colorization\n                let canvas = this._colorCanvas;\n                let context = canvas.getContext(\"2d\");\n                context.globalCompositeOperation = \"source-over\";\n                context.clearRect(0, 0, tileWidth, tileHeight);\n                let fg = fgs[i];\n                let bg = bgs[i];\n                context.drawImage(this._options.tileSet, tile[0], tile[1], tileWidth, tileHeight, 0, 0, tileWidth, tileHeight);\n                if (fg != \"transparent\") {\n                    context.fillStyle = fg;\n                    context.globalCompositeOperation = \"source-atop\";\n                    context.fillRect(0, 0, tileWidth, tileHeight);\n                }\n                if (bg != \"transparent\") {\n                    context.fillStyle = bg;\n                    context.globalCompositeOperation = \"destination-over\";\n                    context.fillRect(0, 0, tileWidth, tileHeight);\n                }\n                this._ctx.drawImage(canvas, x * tileWidth, y * tileHeight, tileWidth, tileHeight);\n            }\n            else { // no colorizing, easy\n                this._ctx.drawImage(this._options.tileSet, tile[0], tile[1], tileWidth, tileHeight, x * tileWidth, y * tileHeight, tileWidth, tileHeight);\n            }\n        }\n    }\n    computeSize(availWidth, availHeight) {\n        let width = Math.floor(availWidth / this._options.tileWidth);\n        let height = Math.floor(availHeight / this._options.tileHeight);\n        return [width, height];\n    }\n    computeFontSize() {\n        throw new Error(\"Tile backend does not understand font size\");\n    }\n    _normalizedEventToPosition(x, y) {\n        return [Math.floor(x / this._options.tileWidth), Math.floor(y / this._options.tileHeight)];\n    }\n    _updateSize() {\n        const opts = this._options;\n        this._ctx.canvas.width = opts.width * opts.tileWidth;\n        this._ctx.canvas.height = opts.height * opts.tileHeight;\n        this._colorCanvas.width = opts.tileWidth;\n        this._colorCanvas.height = opts.tileHeight;\n    }\n}\n", "import { clamp } from \"./util.js\";\nimport RNG from \"./rng.js\";\nexport function fromString(str) {\n    let cached, r;\n    if (str in CACHE) {\n        cached = CACHE[str];\n    }\n    else {\n        if (str.charAt(0) == \"#\") { // hex rgb\n            let matched = str.match(/[0-9a-f]/gi) || [];\n            let values = matched.map((x) => parseInt(x, 16));\n            if (values.length == 3) {\n                cached = values.map((x) => x * 17);\n            }\n            else {\n                for (let i = 0; i < 3; i++) {\n                    values[i + 1] += 16 * values[i];\n                    values.splice(i, 1);\n                }\n                cached = values;\n            }\n        }\n        else if ((r = str.match(/rgb\\(([0-9, ]+)\\)/i))) { // decimal rgb\n            cached = r[1].split(/\\s*,\\s*/).map((x) => parseInt(x));\n        }\n        else { // html name\n            cached = [0, 0, 0];\n        }\n        CACHE[str] = cached;\n    }\n    return cached.slice();\n}\n/**\n * Add two or more colors\n */\nexport function add(color1, ...colors) {\n    let result = color1.slice();\n    for (let i = 0; i < 3; i++) {\n        for (let j = 0; j < colors.length; j++) {\n            result[i] += colors[j][i];\n        }\n    }\n    return result;\n}\n/**\n * Add two or more colors, MODIFIES FIRST ARGUMENT\n */\nexport function add_(color1, ...colors) {\n    for (let i = 0; i < 3; i++) {\n        for (let j = 0; j < colors.length; j++) {\n            color1[i] += colors[j][i];\n        }\n    }\n    return color1;\n}\n/**\n * Multiply (mix) two or more colors\n */\nexport function multiply(color1, ...colors) {\n    let result = color1.slice();\n    for (let i = 0; i < 3; i++) {\n        for (let j = 0; j < colors.length; j++) {\n            result[i] *= colors[j][i] / 255;\n        }\n        result[i] = Math.round(result[i]);\n    }\n    return result;\n}\n/**\n * Multiply (mix) two or more colors, MODIFIES FIRST ARGUMENT\n */\nexport function multiply_(color1, ...colors) {\n    for (let i = 0; i < 3; i++) {\n        for (let j = 0; j < colors.length; j++) {\n            color1[i] *= colors[j][i] / 255;\n        }\n        color1[i] = Math.round(color1[i]);\n    }\n    return color1;\n}\n/**\n * Interpolate (blend) two colors with a given factor\n */\nexport function interpolate(color1, color2, factor = 0.5) {\n    let result = color1.slice();\n    for (let i = 0; i < 3; i++) {\n        result[i] = Math.round(result[i] + factor * (color2[i] - color1[i]));\n    }\n    return result;\n}\nexport const lerp = interpolate;\n/**\n * Interpolate (blend) two colors with a given factor in HSL mode\n */\nexport function interpolateHSL(color1, color2, factor = 0.5) {\n    let hsl1 = rgb2hsl(color1);\n    let hsl2 = rgb2hsl(color2);\n    for (let i = 0; i < 3; i++) {\n        hsl1[i] += factor * (hsl2[i] - hsl1[i]);\n    }\n    return hsl2rgb(hsl1);\n}\nexport const lerpHSL = interpolateHSL;\n/**\n * Create a new random color based on this one\n * @param color\n * @param diff Set of standard deviations\n */\nexport function randomize(color, diff) {\n    if (!(diff instanceof Array)) {\n        diff = Math.round(RNG.getNormal(0, diff));\n    }\n    let result = color.slice();\n    for (let i = 0; i < 3; i++) {\n        result[i] += (diff instanceof Array ? Math.round(RNG.getNormal(0, diff[i])) : diff);\n    }\n    return result;\n}\n/**\n * Converts an RGB color value to HSL. Expects 0..255 inputs, produces 0..1 outputs.\n */\nexport function rgb2hsl(color) {\n    let r = color[0] / 255;\n    let g = color[1] / 255;\n    let b = color[2] / 255;\n    let max = Math.max(r, g, b), min = Math.min(r, g, b);\n    let h = 0, s, l = (max + min) / 2;\n    if (max == min) {\n        s = 0; // achromatic\n    }\n    else {\n        let d = max - min;\n        s = (l > 0.5 ? d / (2 - max - min) : d / (max + min));\n        switch (max) {\n            case r:\n                h = (g - b) / d + (g < b ? 6 : 0);\n                break;\n            case g:\n                h = (b - r) / d + 2;\n                break;\n            case b:\n                h = (r - g) / d + 4;\n                break;\n        }\n        h /= 6;\n    }\n    return [h, s, l];\n}\nfunction hue2rgb(p, q, t) {\n    if (t < 0)\n        t += 1;\n    if (t > 1)\n        t -= 1;\n    if (t < 1 / 6)\n        return p + (q - p) * 6 * t;\n    if (t < 1 / 2)\n        return q;\n    if (t < 2 / 3)\n        return p + (q - p) * (2 / 3 - t) * 6;\n    return p;\n}\n/**\n * Converts an HSL color value to RGB. Expects 0..1 inputs, produces 0..255 outputs.\n */\nexport function hsl2rgb(color) {\n    let l = color[2];\n    if (color[1] == 0) {\n        l = Math.round(l * 255);\n        return [l, l, l];\n    }\n    else {\n        let s = color[1];\n        let q = (l < 0.5 ? l * (1 + s) : l + s - l * s);\n        let p = 2 * l - q;\n        let r = hue2rgb(p, q, color[0] + 1 / 3);\n        let g = hue2rgb(p, q, color[0]);\n        let b = hue2rgb(p, q, color[0] - 1 / 3);\n        return [Math.round(r * 255), Math.round(g * 255), Math.round(b * 255)];\n    }\n}\nexport function toRGB(color) {\n    let clamped = color.map(x => clamp(x, 0, 255));\n    return `rgb(${clamped.join(\",\")})`;\n}\nexport function toHex(color) {\n    let clamped = color.map(x => clamp(x, 0, 255).toString(16).padStart(2, \"0\"));\n    return `#${clamped.join(\"\")}`;\n}\nconst CACHE = {\n    \"black\": [0, 0, 0],\n    \"navy\": [0, 0, 128],\n    \"darkblue\": [0, 0, 139],\n    \"mediumblue\": [0, 0, 205],\n    \"blue\": [0, 0, 255],\n    \"darkgreen\": [0, 100, 0],\n    \"green\": [0, 128, 0],\n    \"teal\": [0, 128, 128],\n    \"darkcyan\": [0, 139, 139],\n    \"deepskyblue\": [0, 191, 255],\n    \"darkturquoise\": [0, 206, 209],\n    \"mediumspringgreen\": [0, 250, 154],\n    \"lime\": [0, 255, 0],\n    \"springgreen\": [0, 255, 127],\n    \"aqua\": [0, 255, 255],\n    \"cyan\": [0, 255, 255],\n    \"midnightblue\": [25, 25, 112],\n    \"dodgerblue\": [30, 144, 255],\n    \"forestgreen\": [34, 139, 34],\n    \"seagreen\": [46, 139, 87],\n    \"darkslategray\": [47, 79, 79],\n    \"darkslategrey\": [47, 79, 79],\n    \"limegreen\": [50, 205, 50],\n    \"mediumseagreen\": [60, 179, 113],\n    \"turquoise\": [64, 224, 208],\n    \"royalblue\": [65, 105, 225],\n    \"steelblue\": [70, 130, 180],\n    \"darkslateblue\": [72, 61, 139],\n    \"mediumturquoise\": [72, 209, 204],\n    \"indigo\": [75, 0, 130],\n    \"darkolivegreen\": [85, 107, 47],\n    \"cadetblue\": [95, 158, 160],\n    \"cornflowerblue\": [100, 149, 237],\n    \"mediumaquamarine\": [102, 205, 170],\n    \"dimgray\": [105, 105, 105],\n    \"dimgrey\": [105, 105, 105],\n    \"slateblue\": [106, 90, 205],\n    \"olivedrab\": [107, 142, 35],\n    \"slategray\": [112, 128, 144],\n    \"slategrey\": [112, 128, 144],\n    \"lightslategray\": [119, 136, 153],\n    \"lightslategrey\": [119, 136, 153],\n    \"mediumslateblue\": [123, 104, 238],\n    \"lawngreen\": [124, 252, 0],\n    \"chartreuse\": [127, 255, 0],\n    \"aquamarine\": [127, 255, 212],\n    \"maroon\": [128, 0, 0],\n    \"purple\": [128, 0, 128],\n    \"olive\": [128, 128, 0],\n    \"gray\": [128, 128, 128],\n    \"grey\": [128, 128, 128],\n    \"skyblue\": [135, 206, 235],\n    \"lightskyblue\": [135, 206, 250],\n    \"blueviolet\": [138, 43, 226],\n    \"darkred\": [139, 0, 0],\n    \"darkmagenta\": [139, 0, 139],\n    \"saddlebrown\": [139, 69, 19],\n    \"darkseagreen\": [143, 188, 143],\n    \"lightgreen\": [144, 238, 144],\n    \"mediumpurple\": [147, 112, 216],\n    \"darkviolet\": [148, 0, 211],\n    \"palegreen\": [152, 251, 152],\n    \"darkorchid\": [153, 50, 204],\n    \"yellowgreen\": [154, 205, 50],\n    \"sienna\": [160, 82, 45],\n    \"brown\": [165, 42, 42],\n    \"darkgray\": [169, 169, 169],\n    \"darkgrey\": [169, 169, 169],\n    \"lightblue\": [173, 216, 230],\n    \"greenyellow\": [173, 255, 47],\n    \"paleturquoise\": [175, 238, 238],\n    \"lightsteelblue\": [176, 196, 222],\n    \"powderblue\": [176, 224, 230],\n    \"firebrick\": [178, 34, 34],\n    \"darkgoldenrod\": [184, 134, 11],\n    \"mediumorchid\": [186, 85, 211],\n    \"rosybrown\": [188, 143, 143],\n    \"darkkhaki\": [189, 183, 107],\n    \"silver\": [192, 192, 192],\n    \"mediumvioletred\": [199, 21, 133],\n    \"indianred\": [205, 92, 92],\n    \"peru\": [205, 133, 63],\n    \"chocolate\": [210, 105, 30],\n    \"tan\": [210, 180, 140],\n    \"lightgray\": [211, 211, 211],\n    \"lightgrey\": [211, 211, 211],\n    \"palevioletred\": [216, 112, 147],\n    \"thistle\": [216, 191, 216],\n    \"orchid\": [218, 112, 214],\n    \"goldenrod\": [218, 165, 32],\n    \"crimson\": [220, 20, 60],\n    \"gainsboro\": [220, 220, 220],\n    \"plum\": [221, 160, 221],\n    \"burlywood\": [222, 184, 135],\n    \"lightcyan\": [224, 255, 255],\n    \"lavender\": [230, 230, 250],\n    \"darksalmon\": [233, 150, 122],\n    \"violet\": [238, 130, 238],\n    \"palegoldenrod\": [238, 232, 170],\n    \"lightcoral\": [240, 128, 128],\n    \"khaki\": [240, 230, 140],\n    \"aliceblue\": [240, 248, 255],\n    \"honeydew\": [240, 255, 240],\n    \"azure\": [240, 255, 255],\n    \"sandybrown\": [244, 164, 96],\n    \"wheat\": [245, 222, 179],\n    \"beige\": [245, 245, 220],\n    \"whitesmoke\": [245, 245, 245],\n    \"mintcream\": [245, 255, 250],\n    \"ghostwhite\": [248, 248, 255],\n    \"salmon\": [250, 128, 114],\n    \"antiquewhite\": [250, 235, 215],\n    \"linen\": [250, 240, 230],\n    \"lightgoldenrodyellow\": [250, 250, 210],\n    \"oldlace\": [253, 245, 230],\n    \"red\": [255, 0, 0],\n    \"fuchsia\": [255, 0, 255],\n    \"magenta\": [255, 0, 255],\n    \"deeppink\": [255, 20, 147],\n    \"orangered\": [255, 69, 0],\n    \"tomato\": [255, 99, 71],\n    \"hotpink\": [255, 105, 180],\n    \"coral\": [255, 127, 80],\n    \"darkorange\": [255, 140, 0],\n    \"lightsalmon\": [255, 160, 122],\n    \"orange\": [255, 165, 0],\n    \"lightpink\": [255, 182, 193],\n    \"pink\": [255, 192, 203],\n    \"gold\": [255, 215, 0],\n    \"peachpuff\": [255, 218, 185],\n    \"navajowhite\": [255, 222, 173],\n    \"moccasin\": [255, 228, 181],\n    \"bisque\": [255, 228, 196],\n    \"mistyrose\": [255, 228, 225],\n    \"blanchedalmond\": [255, 235, 205],\n    \"papayawhip\": [255, 239, 213],\n    \"lavenderblush\": [255, 240, 245],\n    \"seashell\": [255, 245, 238],\n    \"cornsilk\": [255, 248, 220],\n    \"lemonchiffon\": [255, 250, 205],\n    \"floralwhite\": [255, 250, 240],\n    \"snow\": [255, 250, 250],\n    \"yellow\": [255, 255, 0],\n    \"lightyellow\": [255, 255, 224],\n    \"ivory\": [255, 255, 240],\n    \"white\": [255, 255, 255]\n};\n", "import Backend from \"./backend.js\";\nimport * as Color from \"../color.js\";\n/**\n * @class Tile backend\n * @private\n */\nexport default class TileGL extends Backend {\n    constructor() {\n        super();\n        this._uniforms = {};\n        try {\n            this._gl = this._initWebGL();\n        }\n        catch (e) {\n            if (typeof e === \"string\") {\n                alert(e);\n            }\n            else if (e instanceof Error) {\n                alert(e.message);\n            }\n        }\n    }\n    static isSupported() {\n        return !!document.createElement(\"canvas\").getContext(\"webgl2\", { preserveDrawingBuffer: true });\n    }\n    schedule(cb) { requestAnimationFrame(cb); }\n    getContainer() { return this._gl.canvas; }\n    setOptions(opts) {\n        super.setOptions(opts);\n        this._updateSize();\n        let tileSet = this._options.tileSet;\n        if (tileSet && \"complete\" in tileSet && !tileSet.complete) {\n            tileSet.addEventListener(\"load\", () => this._updateTexture(tileSet));\n        }\n        else {\n            this._updateTexture(tileSet);\n        }\n    }\n    draw(data, clearBefore) {\n        const gl = this._gl;\n        const opts = this._options;\n        let [x, y, ch, fg, bg] = data;\n        let scissorY = gl.canvas.height - (y + 1) * opts.tileHeight;\n        gl.scissor(x * opts.tileWidth, scissorY, opts.tileWidth, opts.tileHeight);\n        if (clearBefore) {\n            if (opts.tileColorize) {\n                gl.clearColor(0, 0, 0, 0);\n            }\n            else {\n                gl.clearColor(...parseColor(bg));\n            }\n            gl.clear(gl.COLOR_BUFFER_BIT);\n        }\n        if (!ch) {\n            return;\n        }\n        let chars = [].concat(ch);\n        let bgs = [].concat(bg);\n        let fgs = [].concat(fg);\n        gl.uniform2fv(this._uniforms[\"targetPosRel\"], [x, y]);\n        for (let i = 0; i < chars.length; i++) {\n            let tile = this._options.tileMap[chars[i]];\n            if (!tile) {\n                throw new Error(`Char \"${chars[i]}\" not found in tileMap`);\n            }\n            gl.uniform1f(this._uniforms[\"colorize\"], opts.tileColorize ? 1 : 0);\n            gl.uniform2fv(this._uniforms[\"tilesetPosAbs\"], tile);\n            if (opts.tileColorize) {\n                gl.uniform4fv(this._uniforms[\"tint\"], parseColor(fgs[i]));\n                gl.uniform4fv(this._uniforms[\"bg\"], parseColor(bgs[i]));\n            }\n            gl.drawArrays(gl.TRIANGLE_STRIP, 0, 4);\n        }\n        /*\n        \n        \n                for (let i=0;i<chars.length;i++) {\n        \n                    if (this._options.tileColorize) { // apply colorization\n                        let canvas = this._colorCanvas;\n                        let context = canvas.getContext(\"2d\") as CanvasRenderingContext2D;\n                        context.globalCompositeOperation = \"source-over\";\n                        context.clearRect(0, 0, tileWidth, tileHeight);\n        \n                        let fg = fgs[i];\n                        let bg = bgs[i];\n        \n                        context.drawImage(\n                            this._options.tileSet!,\n                            tile[0], tile[1], tileWidth, tileHeight,\n                            0, 0, tileWidth, tileHeight\n                        );\n        \n                        if (fg != \"transparent\") {\n                            context.fillStyle = fg;\n                            context.globalCompositeOperation = \"source-atop\";\n                            context.fillRect(0, 0, tileWidth, tileHeight);\n                        }\n        \n                        if (bg != \"transparent\") {\n                            context.fillStyle = bg;\n                            context.globalCompositeOperation = \"destination-over\";\n                            context.fillRect(0, 0, tileWidth, tileHeight);\n                        }\n        \n                        this._ctx.drawImage(canvas, x*tileWidth, y*tileHeight, tileWidth, tileHeight);\n                    } else { // no colorizing, easy\n                        this._ctx.drawImage(\n                            this._options.tileSet!,\n                            tile[0], tile[1], tileWidth, tileHeight,\n                            x*tileWidth, y*tileHeight, tileWidth, tileHeight\n                        );\n                    }\n                }\n        \n        */\n    }\n    clear() {\n        const gl = this._gl;\n        gl.clearColor(...parseColor(this._options.bg));\n        gl.scissor(0, 0, gl.canvas.width, gl.canvas.height);\n        gl.clear(gl.COLOR_BUFFER_BIT);\n    }\n    computeSize(availWidth, availHeight) {\n        let width = Math.floor(availWidth / this._options.tileWidth);\n        let height = Math.floor(availHeight / this._options.tileHeight);\n        return [width, height];\n    }\n    computeFontSize() {\n        throw new Error(\"Tile backend does not understand font size\");\n    }\n    eventToPosition(x, y) {\n        let canvas = this._gl.canvas;\n        let rect = canvas.getBoundingClientRect();\n        x -= rect.left;\n        y -= rect.top;\n        x *= canvas.width / rect.width;\n        y *= canvas.height / rect.height;\n        if (x < 0 || y < 0 || x >= canvas.width || y >= canvas.height) {\n            return [-1, -1];\n        }\n        return this._normalizedEventToPosition(x, y);\n    }\n    _initWebGL() {\n        let gl = document.createElement(\"canvas\").getContext(\"webgl2\", { preserveDrawingBuffer: true });\n        window.gl = gl;\n        let program = createProgram(gl, VS, FS);\n        gl.useProgram(program);\n        createQuad(gl);\n        UNIFORMS.forEach(name => this._uniforms[name] = gl.getUniformLocation(program, name));\n        this._program = program;\n        gl.enable(gl.BLEND);\n        gl.blendFuncSeparate(gl.SRC_ALPHA, gl.ONE_MINUS_SRC_ALPHA, gl.ONE, gl.ONE_MINUS_SRC_ALPHA);\n        gl.enable(gl.SCISSOR_TEST);\n        return gl;\n    }\n    _normalizedEventToPosition(x, y) {\n        return [Math.floor(x / this._options.tileWidth), Math.floor(y / this._options.tileHeight)];\n    }\n    _updateSize() {\n        const gl = this._gl;\n        const opts = this._options;\n        const canvasSize = [opts.width * opts.tileWidth, opts.height * opts.tileHeight];\n        gl.canvas.width = canvasSize[0];\n        gl.canvas.height = canvasSize[1];\n        gl.viewport(0, 0, canvasSize[0], canvasSize[1]);\n        gl.uniform2fv(this._uniforms[\"tileSize\"], [opts.tileWidth, opts.tileHeight]);\n        gl.uniform2fv(this._uniforms[\"targetSize\"], canvasSize);\n    }\n    _updateTexture(tileSet) {\n        createTexture(this._gl, tileSet);\n    }\n}\nconst UNIFORMS = [\"targetPosRel\", \"tilesetPosAbs\", \"tileSize\", \"targetSize\", \"colorize\", \"bg\", \"tint\"];\nconst VS = `\n#version 300 es\n\nin vec2 tilePosRel;\nout vec2 tilesetPosPx;\n\nuniform vec2 tilesetPosAbs;\nuniform vec2 tileSize;\nuniform vec2 targetSize;\nuniform vec2 targetPosRel;\n\nvoid main() {\n\tvec2 targetPosPx = (targetPosRel + tilePosRel) * tileSize;\n\tvec2 targetPosNdc = ((targetPosPx / targetSize)-0.5)*2.0;\n\ttargetPosNdc.y *= -1.0;\n\n\tgl_Position = vec4(targetPosNdc, 0.0, 1.0);\n\ttilesetPosPx = tilesetPosAbs + tilePosRel * tileSize;\n}`.trim();\nconst FS = `\n#version 300 es\nprecision highp float;\n\nin vec2 tilesetPosPx;\nout vec4 fragColor;\nuniform sampler2D image;\nuniform bool colorize;\nuniform vec4 bg;\nuniform vec4 tint;\n\nvoid main() {\n\tfragColor = vec4(0, 0, 0, 1);\n\n\tvec4 texel = texelFetch(image, ivec2(tilesetPosPx), 0);\n\n\tif (colorize) {\n\t\ttexel.rgb = tint.a * tint.rgb + (1.0-tint.a) * texel.rgb;\n\t\tfragColor.rgb = texel.a*texel.rgb + (1.0-texel.a)*bg.rgb;\n\t\tfragColor.a = texel.a + (1.0-texel.a)*bg.a;\n\t} else {\n\t\tfragColor = texel;\n\t}\n}`.trim();\nfunction createProgram(gl, vss, fss) {\n    const vs = gl.createShader(gl.VERTEX_SHADER);\n    gl.shaderSource(vs, vss);\n    gl.compileShader(vs);\n    if (!gl.getShaderParameter(vs, gl.COMPILE_STATUS)) {\n        throw new Error(gl.getShaderInfoLog(vs) || \"\");\n    }\n    const fs = gl.createShader(gl.FRAGMENT_SHADER);\n    gl.shaderSource(fs, fss);\n    gl.compileShader(fs);\n    if (!gl.getShaderParameter(fs, gl.COMPILE_STATUS)) {\n        throw new Error(gl.getShaderInfoLog(fs) || \"\");\n    }\n    const p = gl.createProgram();\n    gl.attachShader(p, vs);\n    gl.attachShader(p, fs);\n    gl.linkProgram(p);\n    if (!gl.getProgramParameter(p, gl.LINK_STATUS)) {\n        throw new Error(gl.getProgramInfoLog(p) || \"\");\n    }\n    return p;\n}\nfunction createQuad(gl) {\n    const pos = new Float32Array([0, 0, 1, 0, 0, 1, 1, 1]);\n    const buf = gl.createBuffer();\n    gl.bindBuffer(gl.ARRAY_BUFFER, buf);\n    gl.bufferData(gl.ARRAY_BUFFER, pos, gl.STATIC_DRAW);\n    gl.enableVertexAttribArray(0);\n    gl.vertexAttribPointer(0, 2, gl.FLOAT, false, 0, 0);\n}\nfunction createTexture(gl, data) {\n    let t = gl.createTexture();\n    gl.bindTexture(gl.TEXTURE_2D, t);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.REPEAT);\n    gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.REPEAT);\n    gl.pixelStorei(gl.UNPACK_FLIP_Y_WEBGL, 0);\n    gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE, data);\n    return t;\n}\nlet colorCache = {};\nfunction parseColor(color) {\n    if (!(color in colorCache)) {\n        let parsed;\n        if (color == \"transparent\") {\n            parsed = [0, 0, 0, 0];\n        }\n        else if (color.indexOf(\"rgba\") > -1) {\n            parsed = (color.match(/[\\d.]+/g) || []).map(Number);\n            for (let i = 0; i < 3; i++) {\n                parsed[i] = parsed[i] / 255;\n            }\n        }\n        else {\n            parsed = Color.fromString(color).map($ => $ / 255);\n            parsed.push(1);\n        }\n        colorCache[color] = parsed;\n    }\n    return colorCache[color];\n}\n", "import Backend from \"./backend.js\";\nimport * as Color from \"../color.js\";\nfunction clearToAnsi(bg) {\n    return `\\x1b[0;48;5;${termcolor(bg)}m\\x1b[2J`;\n}\nfunction colorToAnsi(fg, bg) {\n    return `\\x1b[0;38;5;${termcolor(fg)};48;5;${termcolor(bg)}m`;\n}\nfunction positionToAnsi(x, y) {\n    return `\\x1b[${y + 1};${x + 1}H`;\n}\nfunction termcolor(color) {\n    const SRC_COLORS = 256.0;\n    const DST_COLORS = 6.0;\n    const COLOR_RATIO = DST_COLORS / SRC_COLORS;\n    let rgb = Color.fromString(color);\n    let r = Math.floor(rgb[0] * COLOR_RATIO);\n    let g = Math.floor(rgb[1] * COLOR_RATIO);\n    let b = Math.floor(rgb[2] * COLOR_RATIO);\n    return r * 36 + g * 6 + b * 1 + 16;\n}\nexport default class Term extends Backend {\n    constructor() {\n        super();\n        this._offset = [0, 0];\n        this._cursor = [-1, -1];\n        this._lastColor = \"\";\n    }\n    schedule(cb) { setTimeout(cb, 1000 / 60); }\n    setOptions(options) {\n        super.setOptions(options);\n        let size = [options.width, options.height];\n        let avail = this.computeSize();\n        this._offset = avail.map((val, index) => Math.floor((val - size[index]) / 2));\n    }\n    clear() {\n        process.stdout.write(clearToAnsi(this._options.bg));\n    }\n    draw(data, clearBefore) {\n        // determine where to draw what with what colors\n        let [x, y, ch, fg, bg] = data;\n        // determine if we need to move the terminal cursor\n        let dx = this._offset[0] + x;\n        let dy = this._offset[1] + y;\n        let size = this.computeSize();\n        if (dx < 0 || dx >= size[0]) {\n            return;\n        }\n        if (dy < 0 || dy >= size[1]) {\n            return;\n        }\n        if (dx !== this._cursor[0] || dy !== this._cursor[1]) {\n            process.stdout.write(positionToAnsi(dx, dy));\n            this._cursor[0] = dx;\n            this._cursor[1] = dy;\n        }\n        // terminals automatically clear, but if we're clearing when we're\n        // not otherwise provided with a character, just use a space instead\n        if (clearBefore) {\n            if (!ch) {\n                ch = \" \";\n            }\n        }\n        // if we're not clearing and not provided with a character, do nothing\n        if (!ch) {\n            return;\n        }\n        // determine if we need to change colors\n        let newColor = colorToAnsi(fg, bg);\n        if (newColor !== this._lastColor) {\n            process.stdout.write(newColor);\n            this._lastColor = newColor;\n        }\n        if (ch != '\\t') {\n            // write the provided symbol to the display\n            let chars = [].concat(ch);\n            process.stdout.write(chars[0]);\n        }\n        // update our position, given that we wrote a character\n        this._cursor[0]++;\n        if (this._cursor[0] >= size[0]) {\n            this._cursor[0] = 0;\n            this._cursor[1]++;\n        }\n    }\n    computeFontSize() { throw new Error(\"Terminal backend has no notion of font size\"); }\n    eventToPosition(x, y) { return [x, y]; }\n    computeSize() { return [process.stdout.columns, process.stdout.rows]; }\n}\n", "/**\n * @namespace\n * Contains text tokenization and breaking routines\n */\nconst RE_COLORS = /%([bc]){([^}]*)}/g;\n// token types\nexport const TYPE_TEXT = 0;\nexport const TYPE_NEWLINE = 1;\nexport const TYPE_FG = 2;\nexport const TYPE_BG = 3;\n/**\n * Measure size of a resulting text block\n */\nexport function measure(str, maxWidth) {\n    let result = { width: 0, height: 1 };\n    let tokens = tokenize(str, maxWidth);\n    let lineWidth = 0;\n    for (let i = 0; i < tokens.length; i++) {\n        let token = tokens[i];\n        switch (token.type) {\n            case TYPE_TEXT:\n                lineWidth += token.value.length;\n                break;\n            case TYPE_NEWLINE:\n                result.height++;\n                result.width = Math.max(result.width, lineWidth);\n                lineWidth = 0;\n                break;\n        }\n    }\n    result.width = Math.max(result.width, lineWidth);\n    return result;\n}\n/**\n * Convert string to a series of a formatting commands\n */\nexport function tokenize(str, maxWidth) {\n    let result = [];\n    /* first tokenization pass - split texts and color formatting commands */\n    let offset = 0;\n    str.replace(RE_COLORS, function (match, type, name, index) {\n        /* string before */\n        let part = str.substring(offset, index);\n        if (part.length) {\n            result.push({\n                type: TYPE_TEXT,\n                value: part\n            });\n        }\n        /* color command */\n        result.push({\n            type: (type == \"c\" ? TYPE_FG : TYPE_BG),\n            value: name.trim()\n        });\n        offset = index + match.length;\n        return \"\";\n    });\n    /* last remaining part */\n    let part = str.substring(offset);\n    if (part.length) {\n        result.push({\n            type: TYPE_TEXT,\n            value: part\n        });\n    }\n    return breakLines(result, maxWidth);\n}\n/* insert line breaks into first-pass tokenized data */\nfunction breakLines(tokens, maxWidth) {\n    if (!maxWidth) {\n        maxWidth = Infinity;\n    }\n    let i = 0;\n    let lineLength = 0;\n    let lastTokenWithSpace = -1;\n    while (i < tokens.length) { /* take all text tokens, remove space, apply linebreaks */\n        let token = tokens[i];\n        if (token.type == TYPE_NEWLINE) { /* reset */\n            lineLength = 0;\n            lastTokenWithSpace = -1;\n        }\n        if (token.type != TYPE_TEXT) { /* skip non-text tokens */\n            i++;\n            continue;\n        }\n        /* remove spaces at the beginning of line */\n        while (lineLength == 0 && token.value.charAt(0) == \" \") {\n            token.value = token.value.substring(1);\n        }\n        /* forced newline? insert two new tokens after this one */\n        let index = token.value.indexOf(\"\\n\");\n        if (index != -1) {\n            token.value = breakInsideToken(tokens, i, index, true);\n            /* if there are spaces at the end, we must remove them (we do not want the line too long) */\n            let arr = token.value.split(\"\");\n            while (arr.length && arr[arr.length - 1] == \" \") {\n                arr.pop();\n            }\n            token.value = arr.join(\"\");\n        }\n        /* token degenerated? */\n        if (!token.value.length) {\n            tokens.splice(i, 1);\n            continue;\n        }\n        if (lineLength + token.value.length > maxWidth) { /* line too long, find a suitable breaking spot */\n            /* is it possible to break within this token? */\n            let index = -1;\n            while (1) {\n                let nextIndex = token.value.indexOf(\" \", index + 1);\n                if (nextIndex == -1) {\n                    break;\n                }\n                if (lineLength + nextIndex > maxWidth) {\n                    break;\n                }\n                index = nextIndex;\n            }\n            if (index != -1) { /* break at space within this one */\n                token.value = breakInsideToken(tokens, i, index, true);\n            }\n            else if (lastTokenWithSpace != -1) { /* is there a previous token where a break can occur? */\n                let token = tokens[lastTokenWithSpace];\n                let breakIndex = token.value.lastIndexOf(\" \");\n                token.value = breakInsideToken(tokens, lastTokenWithSpace, breakIndex, true);\n                i = lastTokenWithSpace;\n            }\n            else { /* force break in this token */\n                token.value = breakInsideToken(tokens, i, maxWidth - lineLength, false);\n            }\n        }\n        else { /* line not long, continue */\n            lineLength += token.value.length;\n            if (token.value.indexOf(\" \") != -1) {\n                lastTokenWithSpace = i;\n            }\n        }\n        i++; /* advance to next token */\n    }\n    tokens.push({ type: TYPE_NEWLINE }); /* insert fake newline to fix the last text line */\n    /* remove trailing space from text tokens before newlines */\n    let lastTextToken = null;\n    for (let i = 0; i < tokens.length; i++) {\n        let token = tokens[i];\n        switch (token.type) {\n            case TYPE_TEXT:\n                lastTextToken = token;\n                break;\n            case TYPE_NEWLINE:\n                if (lastTextToken) { /* remove trailing space */\n                    let arr = lastTextToken.value.split(\"\");\n                    while (arr.length && arr[arr.length - 1] == \" \") {\n                        arr.pop();\n                    }\n                    lastTextToken.value = arr.join(\"\");\n                }\n                lastTextToken = null;\n                break;\n        }\n    }\n    tokens.pop(); /* remove fake token */\n    return tokens;\n}\n/**\n * Create new tokens and insert them into the stream\n * @param {object[]} tokens\n * @param {int} tokenIndex Token being processed\n * @param {int} breakIndex Index within current token's value\n * @param {bool} removeBreakChar Do we want to remove the breaking character?\n * @returns {string} remaining unbroken token value\n */\nfunction breakInsideToken(tokens, tokenIndex, breakIndex, removeBreakChar) {\n    let newBreakToken = {\n        type: TYPE_NEWLINE\n    };\n    let newTextToken = {\n        type: TYPE_TEXT,\n        value: tokens[tokenIndex].value.substring(breakIndex + (removeBreakChar ? 1 : 0))\n    };\n    tokens.splice(tokenIndex + 1, 0, newBreakToken, newTextToken);\n    return tokens[tokenIndex].value.substring(0, breakIndex);\n}\n", "/** Default with for display and map generators */\nexport let DEFAULT_WIDTH = 80;\n/** Default height for display and map generators */\nexport let DEFAULT_HEIGHT = 25;\nexport const DIRS = {\n    4: [[0, -1], [1, 0], [0, 1], [-1, 0]],\n    8: [[0, -1], [1, -1], [1, 0], [1, 1], [0, 1], [-1, 1], [-1, 0], [-1, -1]],\n    6: [[-1, -1], [1, -1], [2, 0], [1, 1], [-1, 1], [-2, 0]]\n};\nexport const KEYS = {\n    /** Cancel key. */\n    VK_CANCEL: 3,\n    /** Help key. */\n    VK_HELP: 6,\n    /** Backspace key. */\n    VK_BACK_SPACE: 8,\n    /** Tab key. */\n    VK_TAB: 9,\n    /** 5 key on Numpad when NumLock is unlocked. Or on Mac, clear key which is positioned at NumLock key. */\n    VK_CLEAR: 12,\n    /** Return/enter key on the main keyboard. */\n    VK_RETURN: 13,\n    /** Reserved, but not used. */\n    VK_ENTER: 14,\n    /** Shift key. */\n    VK_SHIFT: 16,\n    /** Control key. */\n    VK_CONTROL: 17,\n    /** Alt (Option on Mac) key. */\n    VK_ALT: 18,\n    /** Pause key. */\n    VK_PAUSE: 19,\n    /** Caps lock. */\n    VK_CAPS_LOCK: 20,\n    /** Escape key. */\n    VK_ESCAPE: 27,\n    /** Space bar. */\n    VK_SPACE: 32,\n    /** Page Up key. */\n    VK_PAGE_UP: 33,\n    /** Page Down key. */\n    VK_PAGE_DOWN: 34,\n    /** End key. */\n    VK_END: 35,\n    /** Home key. */\n    VK_HOME: 36,\n    /** Left arrow. */\n    VK_LEFT: 37,\n    /** Up arrow. */\n    VK_UP: 38,\n    /** Right arrow. */\n    VK_RIGHT: 39,\n    /** Down arrow. */\n    VK_DOWN: 40,\n    /** Print Screen key. */\n    VK_PRINTSCREEN: 44,\n    /** Ins(ert) key. */\n    VK_INSERT: 45,\n    /** Del(ete) key. */\n    VK_DELETE: 46,\n    /***/\n    VK_0: 48,\n    /***/\n    VK_1: 49,\n    /***/\n    VK_2: 50,\n    /***/\n    VK_3: 51,\n    /***/\n    VK_4: 52,\n    /***/\n    VK_5: 53,\n    /***/\n    VK_6: 54,\n    /***/\n    VK_7: 55,\n    /***/\n    VK_8: 56,\n    /***/\n    VK_9: 57,\n    /** Colon (:) key. Requires Gecko 15.0 */\n    VK_COLON: 58,\n    /** Semicolon (;) key. */\n    VK_SEMICOLON: 59,\n    /** Less-than (<) key. Requires Gecko 15.0 */\n    VK_LESS_THAN: 60,\n    /** Equals (=) key. */\n    VK_EQUALS: 61,\n    /** Greater-than (>) key. Requires Gecko 15.0 */\n    VK_GREATER_THAN: 62,\n    /** Question mark (?) key. Requires Gecko 15.0 */\n    VK_QUESTION_MARK: 63,\n    /** Atmark (@) key. Requires Gecko 15.0 */\n    VK_AT: 64,\n    /***/\n    VK_A: 65,\n    /***/\n    VK_B: 66,\n    /***/\n    VK_C: 67,\n    /***/\n    VK_D: 68,\n    /***/\n    VK_E: 69,\n    /***/\n    VK_F: 70,\n    /***/\n    VK_G: 71,\n    /***/\n    VK_H: 72,\n    /***/\n    VK_I: 73,\n    /***/\n    VK_J: 74,\n    /***/\n    VK_K: 75,\n    /***/\n    VK_L: 76,\n    /***/\n    VK_M: 77,\n    /***/\n    VK_N: 78,\n    /***/\n    VK_O: 79,\n    /***/\n    VK_P: 80,\n    /***/\n    VK_Q: 81,\n    /***/\n    VK_R: 82,\n    /***/\n    VK_S: 83,\n    /***/\n    VK_T: 84,\n    /***/\n    VK_U: 85,\n    /***/\n    VK_V: 86,\n    /***/\n    VK_W: 87,\n    /***/\n    VK_X: 88,\n    /***/\n    VK_Y: 89,\n    /***/\n    VK_Z: 90,\n    /***/\n    VK_CONTEXT_MENU: 93,\n    /** 0 on the numeric keypad. */\n    VK_NUMPAD0: 96,\n    /** 1 on the numeric keypad. */\n    VK_NUMPAD1: 97,\n    /** 2 on the numeric keypad. */\n    VK_NUMPAD2: 98,\n    /** 3 on the numeric keypad. */\n    VK_NUMPAD3: 99,\n    /** 4 on the numeric keypad. */\n    VK_NUMPAD4: 100,\n    /** 5 on the numeric keypad. */\n    VK_NUMPAD5: 101,\n    /** 6 on the numeric keypad. */\n    VK_NUMPAD6: 102,\n    /** 7 on the numeric keypad. */\n    VK_NUMPAD7: 103,\n    /** 8 on the numeric keypad. */\n    VK_NUMPAD8: 104,\n    /** 9 on the numeric keypad. */\n    VK_NUMPAD9: 105,\n    /** * on the numeric keypad. */\n    VK_MULTIPLY: 106,\n    /** + on the numeric keypad. */\n    VK_ADD: 107,\n    /***/\n    VK_SEPARATOR: 108,\n    /** - on the numeric keypad. */\n    VK_SUBTRACT: 109,\n    /** Decimal point on the numeric keypad. */\n    VK_DECIMAL: 110,\n    /** / on the numeric keypad. */\n    VK_DIVIDE: 111,\n    /** F1 key. */\n    VK_F1: 112,\n    /** F2 key. */\n    VK_F2: 113,\n    /** F3 key. */\n    VK_F3: 114,\n    /** F4 key. */\n    VK_F4: 115,\n    /** F5 key. */\n    VK_F5: 116,\n    /** F6 key. */\n    VK_F6: 117,\n    /** F7 key. */\n    VK_F7: 118,\n    /** F8 key. */\n    VK_F8: 119,\n    /** F9 key. */\n    VK_F9: 120,\n    /** F10 key. */\n    VK_F10: 121,\n    /** F11 key. */\n    VK_F11: 122,\n    /** F12 key. */\n    VK_F12: 123,\n    /** F13 key. */\n    VK_F13: 124,\n    /** F14 key. */\n    VK_F14: 125,\n    /** F15 key. */\n    VK_F15: 126,\n    /** F16 key. */\n    VK_F16: 127,\n    /** F17 key. */\n    VK_F17: 128,\n    /** F18 key. */\n    VK_F18: 129,\n    /** F19 key. */\n    VK_F19: 130,\n    /** F20 key. */\n    VK_F20: 131,\n    /** F21 key. */\n    VK_F21: 132,\n    /** F22 key. */\n    VK_F22: 133,\n    /** F23 key. */\n    VK_F23: 134,\n    /** F24 key. */\n    VK_F24: 135,\n    /** Num Lock key. */\n    VK_NUM_LOCK: 144,\n    /** Scroll Lock key. */\n    VK_SCROLL_LOCK: 145,\n    /** Circumflex (^) key. Requires Gecko 15.0 */\n    VK_CIRCUMFLEX: 160,\n    /** Exclamation (!) key. Requires Gecko 15.0 */\n    VK_EXCLAMATION: 161,\n    /** Double quote () key. Requires Gecko 15.0 */\n    VK_DOUBLE_QUOTE: 162,\n    /** Hash (#) key. Requires Gecko 15.0 */\n    VK_HASH: 163,\n    /** Dollar sign ($) key. Requires Gecko 15.0 */\n    VK_DOLLAR: 164,\n    /** Percent (%) key. Requires Gecko 15.0 */\n    VK_PERCENT: 165,\n    /** Ampersand (&) key. Requires Gecko 15.0 */\n    VK_AMPERSAND: 166,\n    /** Underscore (_) key. Requires Gecko 15.0 */\n    VK_UNDERSCORE: 167,\n    /** Open parenthesis (() key. Requires Gecko 15.0 */\n    VK_OPEN_PAREN: 168,\n    /** Close parenthesis ()) key. Requires Gecko 15.0 */\n    VK_CLOSE_PAREN: 169,\n    /* Asterisk (*) key. Requires Gecko 15.0 */\n    VK_ASTERISK: 170,\n    /** Plus (+) key. Requires Gecko 15.0 */\n    VK_PLUS: 171,\n    /** Pipe (|) key. Requires Gecko 15.0 */\n    VK_PIPE: 172,\n    /** Hyphen-US/docs/Minus (-) key. Requires Gecko 15.0 */\n    VK_HYPHEN_MINUS: 173,\n    /** Open curly bracket ({) key. Requires Gecko 15.0 */\n    VK_OPEN_CURLY_BRACKET: 174,\n    /** Close curly bracket (}) key. Requires Gecko 15.0 */\n    VK_CLOSE_CURLY_BRACKET: 175,\n    /** Tilde (~) key. Requires Gecko 15.0 */\n    VK_TILDE: 176,\n    /** Comma (,) key. */\n    VK_COMMA: 188,\n    /** Period (.) key. */\n    VK_PERIOD: 190,\n    /** Slash (/) key. */\n    VK_SLASH: 191,\n    /** Back tick (`) key. */\n    VK_BACK_QUOTE: 192,\n    /** Open square bracket ([) key. */\n    VK_OPEN_BRACKET: 219,\n    /** Back slash (\\) key. */\n    VK_BACK_SLASH: 220,\n    /** Close square bracket (]) key. */\n    VK_CLOSE_BRACKET: 221,\n    /** Quote (''') key. */\n    VK_QUOTE: 222,\n    /** Meta key on Linux, Command key on Mac. */\n    VK_META: 224,\n    /** AltGr key on Linux. Requires Gecko 15.0 */\n    VK_ALTGR: 225,\n    /** Windows logo key on Windows. Or Super or Hyper key on Linux. Requires Gecko 15.0 */\n    VK_WIN: 91,\n    /** Linux support for this keycode was added in Gecko 4.0. */\n    VK_KANA: 21,\n    /** Linux support for this keycode was added in Gecko 4.0. */\n    VK_HANGUL: 21,\n    /** Ëã±Êï∞ key on Japanese Mac keyboard. Requires Gecko 15.0 */\n    VK_EISU: 22,\n    /** Linux support for this keycode was added in Gecko 4.0. */\n    VK_JUNJA: 23,\n    /** Linux support for this keycode was added in Gecko 4.0. */\n    VK_FINAL: 24,\n    /** Linux support for this keycode was added in Gecko 4.0. */\n    VK_HANJA: 25,\n    /** Linux support for this keycode was added in Gecko 4.0. */\n    VK_KANJI: 25,\n    /** Linux support for this keycode was added in Gecko 4.0. */\n    VK_CONVERT: 28,\n    /** Linux support for this keycode was added in Gecko 4.0. */\n    VK_NONCONVERT: 29,\n    /** Linux support for this keycode was added in Gecko 4.0. */\n    VK_ACCEPT: 30,\n    /** Linux support for this keycode was added in Gecko 4.0. */\n    VK_MODECHANGE: 31,\n    /** Linux support for this keycode was added in Gecko 4.0. */\n    VK_SELECT: 41,\n    /** Linux support for this keycode was added in Gecko 4.0. */\n    VK_PRINT: 42,\n    /** Linux support for this keycode was added in Gecko 4.0. */\n    VK_EXECUTE: 43,\n    /** Linux support for this keycode was added in Gecko 4.0.\t */\n    VK_SLEEP: 95\n};\n", "import Hex from \"./hex.js\";\nimport Rect from \"./rect.js\";\nimport Tile from \"./tile.js\";\nimport TileGL from \"./tile-gl.js\";\nimport Term from \"./term.js\";\nimport * as Text from \"../text.js\";\nimport { DEFAULT_WIDTH, DEFAULT_HEIGHT } from \"../constants.js\";\nconst BACKENDS = {\n    \"hex\": Hex,\n    \"rect\": Rect,\n    \"tile\": Tile,\n    \"tile-gl\": TileGL,\n    \"term\": Term\n};\nconst DEFAULT_OPTIONS = {\n    width: DEFAULT_WIDTH,\n    height: DEFAULT_HEIGHT,\n    transpose: false,\n    layout: \"rect\",\n    fontSize: 15,\n    spacing: 1,\n    border: 0,\n    forceSquareRatio: false,\n    fontFamily: \"monospace\",\n    fontStyle: \"\",\n    fg: \"#ccc\",\n    bg: \"#000\",\n    tileWidth: 32,\n    tileHeight: 32,\n    tileMap: {},\n    tileSet: null,\n    tileColorize: false\n};\n/**\n * @class Visual map display\n */\nexport default class Display {\n    constructor(options = {}) {\n        this._data = {};\n        this._dirty = false; // false = nothing, true = all, object = dirty cells\n        this._options = {};\n        options = Object.assign({}, DEFAULT_OPTIONS, options);\n        this.setOptions(options);\n        this.DEBUG = this.DEBUG.bind(this);\n        this._tick = this._tick.bind(this);\n        this._backend.schedule(this._tick);\n    }\n    /**\n     * Debug helper, ideal as a map generator callback. Always bound to this.\n     * @param {int} x\n     * @param {int} y\n     * @param {int} what\n     */\n    DEBUG(x, y, what) {\n        let colors = [this._options.bg, this._options.fg];\n        this.draw(x, y, null, null, colors[what % colors.length]);\n    }\n    /**\n     * Clear the whole display (cover it with background color)\n     */\n    clear() {\n        this._data = {};\n        this._dirty = true;\n    }\n    /**\n     * @see ROT.Display\n     */\n    setOptions(options) {\n        Object.assign(this._options, options);\n        if (options.width || options.height || options.fontSize || options.fontFamily || options.spacing || options.layout) {\n            if (options.layout) {\n                let ctor = BACKENDS[options.layout];\n                this._backend = new ctor();\n            }\n            this._backend.setOptions(this._options);\n            this._dirty = true;\n        }\n        return this;\n    }\n    /**\n     * Returns currently set options\n     */\n    getOptions() { return this._options; }\n    /**\n     * Returns the DOM node of this display\n     */\n    getContainer() { return this._backend.getContainer(); }\n    /**\n     * Compute the maximum width/height to fit into a set of given constraints\n     * @param {int} availWidth Maximum allowed pixel width\n     * @param {int} availHeight Maximum allowed pixel height\n     * @returns {int[2]} cellWidth,cellHeight\n     */\n    computeSize(availWidth, availHeight) {\n        return this._backend.computeSize(availWidth, availHeight);\n    }\n    /**\n     * Compute the maximum font size to fit into a set of given constraints\n     * @param {int} availWidth Maximum allowed pixel width\n     * @param {int} availHeight Maximum allowed pixel height\n     * @returns {int} fontSize\n     */\n    computeFontSize(availWidth, availHeight) {\n        return this._backend.computeFontSize(availWidth, availHeight);\n    }\n    computeTileSize(availWidth, availHeight) {\n        let width = Math.floor(availWidth / this._options.width);\n        let height = Math.floor(availHeight / this._options.height);\n        return [width, height];\n    }\n    /**\n     * Convert a DOM event (mouse or touch) to map coordinates. Uses first touch for multi-touch.\n     * @param {Event} e event\n     * @returns {int[2]} -1 for values outside of the canvas\n     */\n    eventToPosition(e) {\n        let x, y;\n        if (\"touches\" in e) {\n            x = e.touches[0].clientX;\n            y = e.touches[0].clientY;\n        }\n        else {\n            x = e.clientX;\n            y = e.clientY;\n        }\n        return this._backend.eventToPosition(x, y);\n    }\n    /**\n     * @param {int} x\n     * @param {int} y\n     * @param {string || string[]} ch One or more chars (will be overlapping themselves)\n     * @param {string} [fg] foreground color\n     * @param {string} [bg] background color\n     */\n    draw(x, y, ch, fg, bg) {\n        if (!fg) {\n            fg = this._options.fg;\n        }\n        if (!bg) {\n            bg = this._options.bg;\n        }\n        let key = `${x},${y}`;\n        this._data[key] = [x, y, ch, fg, bg];\n        if (this._dirty === true) {\n            return;\n        } // will already redraw everything \n        if (!this._dirty) {\n            this._dirty = {};\n        } // first!\n        this._dirty[key] = true;\n    }\n    /**\n     * @param {int} x\n     * @param {int} y\n     * @param {string || string[]} ch One or more chars (will be overlapping themselves)\n     * @param {string || null} [fg] foreground color\n     * @param {string || null} [bg] background color\n     */\n    drawOver(x, y, ch, fg, bg) {\n        const key = `${x},${y}`;\n        const existing = this._data[key];\n        if (existing) {\n            existing[2] = ch || existing[2];\n            existing[3] = fg || existing[3];\n            existing[4] = bg || existing[4];\n        }\n        else {\n            this.draw(x, y, ch, fg, bg);\n        }\n    }\n    /**\n     * Draws a text at given position. Optionally wraps at a maximum length. Currently does not work with hex layout.\n     * @param {int} x\n     * @param {int} y\n     * @param {string} text May contain color/background format specifiers, %c{name}/%b{name}, both optional. %c{}/%b{} resets to default.\n     * @param {int} [maxWidth] wrap at what width?\n     * @returns {int} lines drawn\n     */\n    drawText(x, y, text, maxWidth) {\n        let fg = null;\n        let bg = null;\n        let cx = x;\n        let cy = y;\n        let lines = 1;\n        if (!maxWidth) {\n            maxWidth = this._options.width - x;\n        }\n        let tokens = Text.tokenize(text, maxWidth);\n        while (tokens.length) { // interpret tokenized opcode stream\n            let token = tokens.shift();\n            switch (token.type) {\n                case Text.TYPE_TEXT:\n                    let isSpace = false, isPrevSpace = false, isFullWidth = false, isPrevFullWidth = false;\n                    for (let i = 0; i < token.value.length; i++) {\n                        let cc = token.value.charCodeAt(i);\n                        let c = token.value.charAt(i);\n                        if (this._options.layout === \"term\") {\n                            let cch = cc >> 8;\n                            let isCJK = cch === 0x11 || (cch >= 0x2e && cch <= 0x9f) || (cch >= 0xac && cch <= 0xd7) || (cc >= 0xA960 && cc <= 0xA97F);\n                            if (isCJK) {\n                                this.draw(cx + 0, cy, c, fg, bg);\n                                this.draw(cx + 1, cy, \"\\t\", fg, bg);\n                                cx += 2;\n                                continue;\n                            }\n                        }\n                        // Assign to `true` when the current char is full-width.\n                        isFullWidth = (cc > 0xff00 && cc < 0xff61) || (cc > 0xffdc && cc < 0xffe8) || cc > 0xffee;\n                        // Current char is space, whatever full-width or half-width both are OK.\n                        isSpace = (c.charCodeAt(0) == 0x20 || c.charCodeAt(0) == 0x3000);\n                        // The previous char is full-width and\n                        // current char is nether half-width nor a space.\n                        if (isPrevFullWidth && !isFullWidth && !isSpace) {\n                            cx++;\n                        } // add an extra position\n                        // The current char is full-width and\n                        // the previous char is not a space.\n                        if (isFullWidth && !isPrevSpace) {\n                            cx++;\n                        } // add an extra position\n                        this.draw(cx++, cy, c, fg, bg);\n                        isPrevSpace = isSpace;\n                        isPrevFullWidth = isFullWidth;\n                    }\n                    break;\n                case Text.TYPE_FG:\n                    fg = token.value || null;\n                    break;\n                case Text.TYPE_BG:\n                    bg = token.value || null;\n                    break;\n                case Text.TYPE_NEWLINE:\n                    cx = x;\n                    cy++;\n                    lines++;\n                    break;\n            }\n        }\n        return lines;\n    }\n    /**\n     * Timer tick: update dirty parts\n     */\n    _tick() {\n        this._backend.schedule(this._tick);\n        if (!this._dirty) {\n            return;\n        }\n        if (this._dirty === true) { // draw all\n            this._backend.clear();\n            for (let id in this._data) {\n                this._draw(id, false);\n            } // redraw cached data \n        }\n        else { // draw only dirty \n            for (let key in this._dirty) {\n                this._draw(key, true);\n            }\n        }\n        this._dirty = false;\n    }\n    /**\n     * @param {string} key What to draw\n     * @param {bool} clearBefore Is it necessary to clean before?\n     */\n    _draw(key, clearBefore) {\n        let data = this._data[key];\n        if (data[4] != this._options.bg) {\n            clearBefore = true;\n        }\n        this._backend.draw(data, clearBefore);\n    }\n}\nDisplay.Rect = Rect;\nDisplay.Hex = Hex;\nDisplay.Tile = Tile;\nDisplay.TileGL = TileGL;\nDisplay.Term = Term;\n", "import RNG from \"./rng.js\";\n/**\n * @class (Markov process)-based string generator.\n * Copied from a <a href=\"http://roguebasin.com/index.php/Names_from_a_high_order_Markov_Process_and_a_simplified_Katz_back-off_scheme\">RogueBasin article</a>.\n * Offers configurable order and prior.\n */\nexport default class StringGenerator {\n    constructor(options) {\n        this._options = {\n            words: false,\n            order: 3,\n            prior: 0.001\n        };\n        Object.assign(this._options, options);\n        this._boundary = String.fromCharCode(0);\n        this._suffix = this._boundary;\n        this._prefix = [];\n        for (let i = 0; i < this._options.order; i++) {\n            this._prefix.push(this._boundary);\n        }\n        this._priorValues = {};\n        this._priorValues[this._boundary] = this._options.prior;\n        this._data = {};\n    }\n    /**\n     * Remove all learning data\n     */\n    clear() {\n        this._data = {};\n        this._priorValues = {};\n    }\n    /**\n     * @returns {string} Generated string\n     */\n    generate() {\n        let result = [this._sample(this._prefix)];\n        while (result[result.length - 1] != this._boundary) {\n            result.push(this._sample(result));\n        }\n        return this._join(result.slice(0, -1));\n    }\n    /**\n     * Observe (learn) a string from a training set\n     */\n    observe(string) {\n        let tokens = this._split(string);\n        for (let i = 0; i < tokens.length; i++) {\n            this._priorValues[tokens[i]] = this._options.prior;\n        }\n        tokens = this._prefix.concat(tokens).concat(this._suffix); /* add boundary symbols */\n        for (let i = this._options.order; i < tokens.length; i++) {\n            let context = tokens.slice(i - this._options.order, i);\n            let event = tokens[i];\n            for (let j = 0; j < context.length; j++) {\n                let subcontext = context.slice(j);\n                this._observeEvent(subcontext, event);\n            }\n        }\n    }\n    getStats() {\n        let parts = [];\n        let priorCount = Object.keys(this._priorValues).length;\n        priorCount--; // boundary\n        parts.push(\"distinct samples: \" + priorCount);\n        let dataCount = Object.keys(this._data).length;\n        let eventCount = 0;\n        for (let p in this._data) {\n            eventCount += Object.keys(this._data[p]).length;\n        }\n        parts.push(\"dictionary size (contexts): \" + dataCount);\n        parts.push(\"dictionary size (events): \" + eventCount);\n        return parts.join(\", \");\n    }\n    /**\n     * @param {string}\n     * @returns {string[]}\n     */\n    _split(str) {\n        return str.split(this._options.words ? /\\s+/ : \"\");\n    }\n    /**\n     * @param {string[]}\n     * @returns {string}\n     */\n    _join(arr) {\n        return arr.join(this._options.words ? \" \" : \"\");\n    }\n    /**\n     * @param {string[]} context\n     * @param {string} event\n     */\n    _observeEvent(context, event) {\n        let key = this._join(context);\n        if (!(key in this._data)) {\n            this._data[key] = {};\n        }\n        let data = this._data[key];\n        if (!(event in data)) {\n            data[event] = 0;\n        }\n        data[event]++;\n    }\n    /**\n     * @param {string[]}\n     * @returns {string}\n     */\n    _sample(context) {\n        context = this._backoff(context);\n        let key = this._join(context);\n        let data = this._data[key];\n        let available = {};\n        if (this._options.prior) {\n            for (let event in this._priorValues) {\n                available[event] = this._priorValues[event];\n            }\n            for (let event in data) {\n                available[event] += data[event];\n            }\n        }\n        else {\n            available = data;\n        }\n        return RNG.getWeightedValue(available);\n    }\n    /**\n     * @param {string[]}\n     * @returns {string[]}\n     */\n    _backoff(context) {\n        if (context.length > this._options.order) {\n            context = context.slice(-this._options.order);\n        }\n        else if (context.length < this._options.order) {\n            context = this._prefix.slice(0, this._options.order - context.length).concat(context);\n        }\n        while (!(this._join(context) in this._data) && context.length > 0) {\n            context = context.slice(1);\n        }\n        return context;\n    }\n}\n", "export class MinHeap {\n    constructor() {\n        this.heap = [];\n        this.timestamp = 0;\n    }\n    lessThan(a, b) {\n        return a.key == b.key ? a.timestamp < b.timestamp : a.key < b.key;\n    }\n    shift(v) {\n        this.heap = this.heap.map(({ key, value, timestamp }) => ({ key: key + v, value, timestamp }));\n    }\n    len() {\n        return this.heap.length;\n    }\n    push(value, key) {\n        this.timestamp += 1;\n        const loc = this.len();\n        this.heap.push({ value, timestamp: this.timestamp, key });\n        this.updateUp(loc);\n    }\n    pop() {\n        if (this.len() == 0) {\n            throw new Error(\"no element to pop\");\n        }\n        const top = this.heap[0];\n        if (this.len() > 1) {\n            this.heap[0] = this.heap.pop();\n            this.updateDown(0);\n        }\n        else {\n            this.heap.pop();\n        }\n        return top;\n    }\n    find(v) {\n        for (let i = 0; i < this.len(); i++) {\n            if (v == this.heap[i].value) {\n                return this.heap[i];\n            }\n        }\n        return null;\n    }\n    remove(v) {\n        let index = null;\n        for (let i = 0; i < this.len(); i++) {\n            if (v == this.heap[i].value) {\n                index = i;\n            }\n        }\n        if (index === null) {\n            return false;\n        }\n        if (this.len() > 1) {\n            let last = this.heap.pop();\n            if (last.value != v) { // if the last one is being removed, do nothing\n                this.heap[index] = last;\n                this.updateDown(index);\n            }\n            return true;\n        }\n        else {\n            this.heap.pop();\n        }\n        return true;\n    }\n    parentNode(x) {\n        return Math.floor((x - 1) / 2);\n    }\n    leftChildNode(x) {\n        return 2 * x + 1;\n    }\n    rightChildNode(x) {\n        return 2 * x + 2;\n    }\n    existNode(x) {\n        return x >= 0 && x < this.heap.length;\n    }\n    swap(x, y) {\n        const t = this.heap[x];\n        this.heap[x] = this.heap[y];\n        this.heap[y] = t;\n    }\n    minNode(numbers) {\n        const validnumbers = numbers.filter(this.existNode.bind(this));\n        let minimal = validnumbers[0];\n        for (const i of validnumbers) {\n            if (this.lessThan(this.heap[i], this.heap[minimal])) {\n                minimal = i;\n            }\n        }\n        return minimal;\n    }\n    updateUp(x) {\n        if (x == 0) {\n            return;\n        }\n        const parent = this.parentNode(x);\n        if (this.existNode(parent) && this.lessThan(this.heap[x], this.heap[parent])) {\n            this.swap(x, parent);\n            this.updateUp(parent);\n        }\n    }\n    updateDown(x) {\n        const leftChild = this.leftChildNode(x);\n        const rightChild = this.rightChildNode(x);\n        if (!this.existNode(leftChild)) {\n            return;\n        }\n        const m = this.minNode([x, leftChild, rightChild]);\n        if (m != x) {\n            this.swap(x, m);\n            this.updateDown(m);\n        }\n    }\n    debugPrint() {\n        console.log(this.heap);\n    }\n}\n", "import { MinHeap } from \"./MinHeap.js\";\nexport default class EventQueue {\n    /**\n     * @class Generic event queue: stores events and retrieves them based on their time\n     */\n    constructor() {\n        this._time = 0;\n        this._events = new MinHeap();\n    }\n    /**\n     * @returns {number} Elapsed time\n     */\n    getTime() { return this._time; }\n    /**\n     * Clear all scheduled events\n     */\n    clear() {\n        this._events = new MinHeap();\n        return this;\n    }\n    /**\n     * @param {?} event\n     * @param {number} time\n     */\n    add(event, time) {\n        this._events.push(event, time);\n    }\n    /**\n     * Locates the nearest event, advances time if necessary. Returns that event and removes it from the queue.\n     * @returns {? || null} The event previously added by addEvent, null if no event available\n     */\n    get() {\n        if (!this._events.len()) {\n            return null;\n        }\n        let { key: time, value: event } = this._events.pop();\n        if (time > 0) { /* advance */\n            this._time += time;\n            this._events.shift(-time);\n        }\n        return event;\n    }\n    /**\n     * Get the time associated with the given event\n     * @param {?} event\n     * @returns {number} time\n     */\n    getEventTime(event) {\n        const r = this._events.find(event);\n        if (r) {\n            const { key } = r;\n            return key;\n        }\n        return undefined;\n    }\n    /**\n     * Remove an event from the queue\n     * @param {?} event\n     * @returns {bool} success?\n     */\n    remove(event) {\n        return this._events.remove(event);\n    }\n    ;\n}\n", "import EventQueue from \"../eventqueue.js\";\nexport default class Scheduler {\n    /**\n     * @class Abstract scheduler\n     */\n    constructor() {\n        this._queue = new EventQueue();\n        this._repeat = [];\n        this._current = null;\n    }\n    /**\n     * @see ROT.EventQueue#getTime\n     */\n    getTime() { return this._queue.getTime(); }\n    /**\n     * @param {?} item\n     * @param {bool} repeat\n     */\n    add(item, repeat) {\n        if (repeat) {\n            this._repeat.push(item);\n        }\n        return this;\n    }\n    /**\n     * Get the time the given item is scheduled for\n     * @param {?} item\n     * @returns {number} time\n     */\n    getTimeOf(item) {\n        return this._queue.getEventTime(item);\n    }\n    /**\n     * Clear all items\n     */\n    clear() {\n        this._queue.clear();\n        this._repeat = [];\n        this._current = null;\n        return this;\n    }\n    /**\n     * Remove a previously added item\n     * @param {?} item\n     * @returns {bool} successful?\n     */\n    remove(item) {\n        let result = this._queue.remove(item);\n        let index = this._repeat.indexOf(item);\n        if (index != -1) {\n            this._repeat.splice(index, 1);\n        }\n        if (this._current == item) {\n            this._current = null;\n        }\n        return result;\n    }\n    /**\n     * Schedule next item\n     * @returns {?}\n     */\n    next() {\n        this._current = this._queue.get();\n        return this._current;\n    }\n}\n", "import Scheduler from \"./scheduler.js\";\n/**\n * @class Simple fair scheduler (round-robin style)\n */\nexport default class Simple extends Scheduler {\n    add(item, repeat) {\n        this._queue.add(item, 0);\n        return super.add(item, repeat);\n    }\n    next() {\n        if (this._current !== null && this._repeat.indexOf(this._current) != -1) {\n            this._queue.add(this._current, 0);\n        }\n        return super.next();\n    }\n}\n", "import Scheduler from \"./scheduler.js\";\n/**\n * @class Speed-based scheduler\n */\nexport default class Speed extends Scheduler {\n    /**\n     * @param {object} item anything with \"getSpeed\" method\n     * @param {bool} repeat\n     * @param {number} [time=1/item.getSpeed()]\n     * @see ROT.Scheduler#add\n     */\n    add(item, repeat, time) {\n        this._queue.add(item, time !== undefined ? time : 1 / item.getSpeed());\n        return super.add(item, repeat);\n    }\n    /**\n     * @see ROT.Scheduler#next\n     */\n    next() {\n        if (this._current && this._repeat.indexOf(this._current) != -1) {\n            this._queue.add(this._current, 1 / this._current.getSpeed());\n        }\n        return super.next();\n    }\n}\n", "import Scheduler from \"./scheduler.js\";\n/**\n * @class Action-based scheduler\n * @augments ROT.Scheduler\n */\nexport default class Action extends Scheduler {\n    constructor() {\n        super();\n        this._defaultDuration = 1; /* for newly added */\n        this._duration = this._defaultDuration; /* for this._current */\n    }\n    /**\n     * @param {object} item\n     * @param {bool} repeat\n     * @param {number} [time=1]\n     * @see ROT.Scheduler#add\n     */\n    add(item, repeat, time) {\n        this._queue.add(item, time || this._defaultDuration);\n        return super.add(item, repeat);\n    }\n    clear() {\n        this._duration = this._defaultDuration;\n        return super.clear();\n    }\n    remove(item) {\n        if (item == this._current) {\n            this._duration = this._defaultDuration;\n        }\n        return super.remove(item);\n    }\n    /**\n     * @see ROT.Scheduler#next\n     */\n    next() {\n        if (this._current !== null && this._repeat.indexOf(this._current) != -1) {\n            this._queue.add(this._current, this._duration || this._defaultDuration);\n            this._duration = this._defaultDuration;\n        }\n        return super.next();\n    }\n    /**\n     * Set duration for the active item\n     */\n    setDuration(time) {\n        if (this._current) {\n            this._duration = time;\n        }\n        return this;\n    }\n}\n", "import Simple from \"./simple.js\";\nimport Speed from \"./speed.js\";\nimport Action from \"./action.js\";\nexport default { Simple, Speed, Action };\n", "import { DIRS } from \"../constants.js\";\n;\n;\nexport default class FOV {\n    /**\n     * @class Abstract FOV algorithm\n     * @param {function} lightPassesCallback Does the light pass through x,y?\n     * @param {object} [options]\n     * @param {int} [options.topology=8] 4/6/8\n     */\n    constructor(lightPassesCallback, options = {}) {\n        this._lightPasses = lightPassesCallback;\n        this._options = Object.assign({ topology: 8 }, options);\n    }\n    /**\n     * Return all neighbors in a concentric ring\n     * @param {int} cx center-x\n     * @param {int} cy center-y\n     * @param {int} r range\n     */\n    _getCircle(cx, cy, r) {\n        let result = [];\n        let dirs, countFactor, startOffset;\n        switch (this._options.topology) {\n            case 4:\n                countFactor = 1;\n                startOffset = [0, 1];\n                dirs = [\n                    DIRS[8][7],\n                    DIRS[8][1],\n                    DIRS[8][3],\n                    DIRS[8][5]\n                ];\n                break;\n            case 6:\n                dirs = DIRS[6];\n                countFactor = 1;\n                startOffset = [-1, 1];\n                break;\n            case 8:\n                dirs = DIRS[4];\n                countFactor = 2;\n                startOffset = [-1, 1];\n                break;\n            default:\n                throw new Error(\"Incorrect topology for FOV computation\");\n                break;\n        }\n        /* starting neighbor */\n        let x = cx + startOffset[0] * r;\n        let y = cy + startOffset[1] * r;\n        /* circle */\n        for (let i = 0; i < dirs.length; i++) {\n            for (let j = 0; j < r * countFactor; j++) {\n                result.push([x, y]);\n                x += dirs[i][0];\n                y += dirs[i][1];\n            }\n        }\n        return result;\n    }\n}\n", "import FOV from \"./fov.js\";\n/**\n * @class Discrete shadowcasting algorithm. Obsoleted by Precise shadowcasting.\n * @augments ROT.FOV\n */\nexport default class DiscreteShadowcasting extends FOV {\n    compute(x, y, R, callback) {\n        /* this place is always visible */\n        callback(x, y, 0, 1);\n        /* standing in a dark place. FIXME is this a good idea?  */\n        if (!this._lightPasses(x, y)) {\n            return;\n        }\n        /* start and end angles */\n        let DATA = [];\n        let A, B, cx, cy, blocks;\n        /* analyze surrounding cells in concentric rings, starting from the center */\n        for (let r = 1; r <= R; r++) {\n            let neighbors = this._getCircle(x, y, r);\n            let angle = 360 / neighbors.length;\n            for (let i = 0; i < neighbors.length; i++) {\n                cx = neighbors[i][0];\n                cy = neighbors[i][1];\n                A = angle * (i - 0.5);\n                B = A + angle;\n                blocks = !this._lightPasses(cx, cy);\n                if (this._visibleCoords(Math.floor(A), Math.ceil(B), blocks, DATA)) {\n                    callback(cx, cy, r, 1);\n                }\n                if (DATA.length == 2 && DATA[0] == 0 && DATA[1] == 360) {\n                    return;\n                } /* cutoff? */\n            } /* for all cells in this ring */\n        } /* for all rings */\n    }\n    /**\n     * @param {int} A start angle\n     * @param {int} B end angle\n     * @param {bool} blocks Does current cell block visibility?\n     * @param {int[][]} DATA shadowed angle pairs\n     */\n    _visibleCoords(A, B, blocks, DATA) {\n        if (A < 0) {\n            let v1 = this._visibleCoords(0, B, blocks, DATA);\n            let v2 = this._visibleCoords(360 + A, 360, blocks, DATA);\n            return v1 || v2;\n        }\n        let index = 0;\n        while (index < DATA.length && DATA[index] < A) {\n            index++;\n        }\n        if (index == DATA.length) { /* completely new shadow */\n            if (blocks) {\n                DATA.push(A, B);\n            }\n            return true;\n        }\n        let count = 0;\n        if (index % 2) { /* this shadow starts in an existing shadow, or within its ending boundary */\n            while (index < DATA.length && DATA[index] < B) {\n                index++;\n                count++;\n            }\n            if (count == 0) {\n                return false;\n            }\n            if (blocks) {\n                if (count % 2) {\n                    DATA.splice(index - count, count, B);\n                }\n                else {\n                    DATA.splice(index - count, count);\n                }\n            }\n            return true;\n        }\n        else { /* this shadow starts outside an existing shadow, or within a starting boundary */\n            while (index < DATA.length && DATA[index] < B) {\n                index++;\n                count++;\n            }\n            /* visible when outside an existing shadow, or when overlapping */\n            if (A == DATA[index - count] && count == 1) {\n                return false;\n            }\n            if (blocks) {\n                if (count % 2) {\n                    DATA.splice(index - count, count, A);\n                }\n                else {\n                    DATA.splice(index - count, count, A, B);\n                }\n            }\n            return true;\n        }\n    }\n}\n", "import FOV from \"./fov.js\";\n/**\n * @class Precise shadowcasting algorithm\n * @augments ROT.FOV\n */\nexport default class PreciseShadowcasting extends FOV {\n    compute(x, y, R, callback) {\n        /* this place is always visible */\n        callback(x, y, 0, 1);\n        /* standing in a dark place. FIXME is this a good idea?  */\n        if (!this._lightPasses(x, y)) {\n            return;\n        }\n        /* list of all shadows */\n        let SHADOWS = [];\n        let cx, cy, blocks, A1, A2, visibility;\n        /* analyze surrounding cells in concentric rings, starting from the center */\n        for (let r = 1; r <= R; r++) {\n            let neighbors = this._getCircle(x, y, r);\n            let neighborCount = neighbors.length;\n            for (let i = 0; i < neighborCount; i++) {\n                cx = neighbors[i][0];\n                cy = neighbors[i][1];\n                /* shift half-an-angle backwards to maintain consistency of 0-th cells */\n                A1 = [i ? 2 * i - 1 : 2 * neighborCount - 1, 2 * neighborCount];\n                A2 = [2 * i + 1, 2 * neighborCount];\n                blocks = !this._lightPasses(cx, cy);\n                visibility = this._checkVisibility(A1, A2, blocks, SHADOWS);\n                if (visibility) {\n                    callback(cx, cy, r, visibility);\n                }\n                if (SHADOWS.length == 2 && SHADOWS[0][0] == 0 && SHADOWS[1][0] == SHADOWS[1][1]) {\n                    return;\n                } /* cutoff? */\n            } /* for all cells in this ring */\n        } /* for all rings */\n    }\n    /**\n     * @param {int[2]} A1 arc start\n     * @param {int[2]} A2 arc end\n     * @param {bool} blocks Does current arc block visibility?\n     * @param {int[][]} SHADOWS list of active shadows\n     */\n    _checkVisibility(A1, A2, blocks, SHADOWS) {\n        if (A1[0] > A2[0]) { /* split into two sub-arcs */\n            let v1 = this._checkVisibility(A1, [A1[1], A1[1]], blocks, SHADOWS);\n            let v2 = this._checkVisibility([0, 1], A2, blocks, SHADOWS);\n            return (v1 + v2) / 2;\n        }\n        /* index1: first shadow >= A1 */\n        let index1 = 0, edge1 = false;\n        while (index1 < SHADOWS.length) {\n            let old = SHADOWS[index1];\n            let diff = old[0] * A1[1] - A1[0] * old[1];\n            if (diff >= 0) { /* old >= A1 */\n                if (diff == 0 && !(index1 % 2)) {\n                    edge1 = true;\n                }\n                break;\n            }\n            index1++;\n        }\n        /* index2: last shadow <= A2 */\n        let index2 = SHADOWS.length, edge2 = false;\n        while (index2--) {\n            let old = SHADOWS[index2];\n            let diff = A2[0] * old[1] - old[0] * A2[1];\n            if (diff >= 0) { /* old <= A2 */\n                if (diff == 0 && (index2 % 2)) {\n                    edge2 = true;\n                }\n                break;\n            }\n        }\n        let visible = true;\n        if (index1 == index2 && (edge1 || edge2)) { /* subset of existing shadow, one of the edges match */\n            visible = false;\n        }\n        else if (edge1 && edge2 && index1 + 1 == index2 && (index2 % 2)) { /* completely equivalent with existing shadow */\n            visible = false;\n        }\n        else if (index1 > index2 && (index1 % 2)) { /* subset of existing shadow, not touching */\n            visible = false;\n        }\n        if (!visible) {\n            return 0;\n        } /* fast case: not visible */\n        let visibleLength;\n        /* compute the length of visible arc, adjust list of shadows (if blocking) */\n        let remove = index2 - index1 + 1;\n        if (remove % 2) {\n            if (index1 % 2) { /* first edge within existing shadow, second outside */\n                let P = SHADOWS[index1];\n                visibleLength = (A2[0] * P[1] - P[0] * A2[1]) / (P[1] * A2[1]);\n                if (blocks) {\n                    SHADOWS.splice(index1, remove, A2);\n                }\n            }\n            else { /* second edge within existing shadow, first outside */\n                let P = SHADOWS[index2];\n                visibleLength = (P[0] * A1[1] - A1[0] * P[1]) / (A1[1] * P[1]);\n                if (blocks) {\n                    SHADOWS.splice(index1, remove, A1);\n                }\n            }\n        }\n        else {\n            if (index1 % 2) { /* both edges within existing shadows */\n                let P1 = SHADOWS[index1];\n                let P2 = SHADOWS[index2];\n                visibleLength = (P2[0] * P1[1] - P1[0] * P2[1]) / (P1[1] * P2[1]);\n                if (blocks) {\n                    SHADOWS.splice(index1, remove);\n                }\n            }\n            else { /* both edges outside existing shadows */\n                if (blocks) {\n                    SHADOWS.splice(index1, remove, A1, A2);\n                }\n                return 1; /* whole arc visible! */\n            }\n        }\n        let arcLength = (A2[0] * A1[1] - A1[0] * A2[1]) / (A1[1] * A2[1]);\n        return visibleLength / arcLength;\n    }\n}\n", "import FOV from \"./fov.js\";\n/** Octants used for translating recursive shadowcasting offsets */\nconst OCTANTS = [\n    [-1, 0, 0, 1],\n    [0, -1, 1, 0],\n    [0, -1, -1, 0],\n    [-1, 0, 0, -1],\n    [1, 0, 0, -1],\n    [0, 1, -1, 0],\n    [0, 1, 1, 0],\n    [1, 0, 0, 1]\n];\n/**\n * @class Recursive shadowcasting algorithm\n * Currently only supports 4/8 topologies, not hexagonal.\n * Based on Peter Harkins' implementation of Bj√∂rn Bergstr√∂m's algorithm described here: http://www.roguebasin.com/index.php?title=FOV_using_recursive_shadowcasting\n * @augments ROT.FOV\n */\nexport default class RecursiveShadowcasting extends FOV {\n    /**\n     * Compute visibility for a 360-degree circle\n     * @param {int} x\n     * @param {int} y\n     * @param {int} R Maximum visibility radius\n     * @param {function} callback\n     */\n    compute(x, y, R, callback) {\n        //You can always see your own tile\n        callback(x, y, 0, 1);\n        for (let i = 0; i < OCTANTS.length; i++) {\n            this._renderOctant(x, y, OCTANTS[i], R, callback);\n        }\n    }\n    /**\n     * Compute visibility for a 180-degree arc\n     * @param {int} x\n     * @param {int} y\n     * @param {int} R Maximum visibility radius\n     * @param {int} dir Direction to look in (expressed in a ROT.DIRS value);\n     * @param {function} callback\n     */\n    compute180(x, y, R, dir, callback) {\n        //You can always see your own tile\n        callback(x, y, 0, 1);\n        let previousOctant = (dir - 1 + 8) % 8; //Need to retrieve the previous octant to render a full 180 degrees\n        let nextPreviousOctant = (dir - 2 + 8) % 8; //Need to retrieve the previous two octants to render a full 180 degrees\n        let nextOctant = (dir + 1 + 8) % 8; //Need to grab to next octant to render a full 180 degrees\n        this._renderOctant(x, y, OCTANTS[nextPreviousOctant], R, callback);\n        this._renderOctant(x, y, OCTANTS[previousOctant], R, callback);\n        this._renderOctant(x, y, OCTANTS[dir], R, callback);\n        this._renderOctant(x, y, OCTANTS[nextOctant], R, callback);\n    }\n    ;\n    /**\n     * Compute visibility for a 90-degree arc\n     * @param {int} x\n     * @param {int} y\n     * @param {int} R Maximum visibility radius\n     * @param {int} dir Direction to look in (expressed in a ROT.DIRS value);\n     * @param {function} callback\n     */\n    compute90(x, y, R, dir, callback) {\n        //You can always see your own tile\n        callback(x, y, 0, 1);\n        let previousOctant = (dir - 1 + 8) % 8; //Need to retrieve the previous octant to render a full 90 degrees\n        this._renderOctant(x, y, OCTANTS[dir], R, callback);\n        this._renderOctant(x, y, OCTANTS[previousOctant], R, callback);\n    }\n    /**\n     * Render one octant (45-degree arc) of the viewshed\n     * @param {int} x\n     * @param {int} y\n     * @param {int} octant Octant to be rendered\n     * @param {int} R Maximum visibility radius\n     * @param {function} callback\n     */\n    _renderOctant(x, y, octant, R, callback) {\n        //Radius incremented by 1 to provide same coverage area as other shadowcasting radiuses\n        this._castVisibility(x, y, 1, 1.0, 0.0, R + 1, octant[0], octant[1], octant[2], octant[3], callback);\n    }\n    /**\n     * Actually calculates the visibility\n     * @param {int} startX The starting X coordinate\n     * @param {int} startY The starting Y coordinate\n     * @param {int} row The row to render\n     * @param {float} visSlopeStart The slope to start at\n     * @param {float} visSlopeEnd The slope to end at\n     * @param {int} radius The radius to reach out to\n     * @param {int} xx\n     * @param {int} xy\n     * @param {int} yx\n     * @param {int} yy\n     * @param {function} callback The callback to use when we hit a block that is visible\n     */\n    _castVisibility(startX, startY, row, visSlopeStart, visSlopeEnd, radius, xx, xy, yx, yy, callback) {\n        if (visSlopeStart < visSlopeEnd) {\n            return;\n        }\n        for (let i = row; i <= radius; i++) {\n            let dx = -i - 1;\n            let dy = -i;\n            let blocked = false;\n            let newStart = 0;\n            //'Row' could be column, names here assume octant 0 and would be flipped for half the octants\n            while (dx <= 0) {\n                dx += 1;\n                //Translate from relative coordinates to map coordinates\n                let mapX = startX + dx * xx + dy * xy;\n                let mapY = startY + dx * yx + dy * yy;\n                //Range of the row\n                let slopeStart = (dx - 0.5) / (dy + 0.5);\n                let slopeEnd = (dx + 0.5) / (dy - 0.5);\n                //Ignore if not yet at left edge of Octant\n                if (slopeEnd > visSlopeStart) {\n                    continue;\n                }\n                //Done if past right edge\n                if (slopeStart < visSlopeEnd) {\n                    break;\n                }\n                //If it's in range, it's visible\n                if ((dx * dx + dy * dy) < (radius * radius)) {\n                    callback(mapX, mapY, i, 1);\n                }\n                if (!blocked) {\n                    //If tile is a blocking tile, cast around it\n                    if (!this._lightPasses(mapX, mapY) && i < radius) {\n                        blocked = true;\n                        this._castVisibility(startX, startY, i + 1, visSlopeStart, slopeStart, radius, xx, xy, yx, yy, callback);\n                        newStart = slopeEnd;\n                    }\n                }\n                else {\n                    //Keep narrowing if scanning across a block\n                    if (!this._lightPasses(mapX, mapY)) {\n                        newStart = slopeEnd;\n                        continue;\n                    }\n                    //Block has ended\n                    blocked = false;\n                    visSlopeStart = newStart;\n                }\n            }\n            if (blocked) {\n                break;\n            }\n        }\n    }\n}\n", "import DiscreteShadowcasting from \"./discrete-shadowcasting.js\";\nimport PreciseShadowcasting from \"./precise-shadowcasting.js\";\nimport RecursiveShadowcasting from \"./recursive-shadowcasting.js\";\nexport default { DiscreteShadowcasting, PreciseShadowcasting, RecursiveShadowcasting };\n", "import { DEFAULT_WIDTH, DEFAULT_HEIGHT } from \"../constants.js\";\n;\nexport default class Map {\n    /**\n     * @class Base map generator\n     * @param {int} [width=ROT.DEFAULT_WIDTH]\n     * @param {int} [height=ROT.DEFAULT_HEIGHT]\n     */\n    constructor(width = DEFAULT_WIDTH, height = DEFAULT_HEIGHT) {\n        this._width = width;\n        this._height = height;\n    }\n    ;\n    _fillMap(value) {\n        let map = [];\n        for (let i = 0; i < this._width; i++) {\n            map.push([]);\n            for (let j = 0; j < this._height; j++) {\n                map[i].push(value);\n            }\n        }\n        return map;\n    }\n}\n", "import Map from \"./map.js\";\n/**\n * @class Simple empty rectangular room\n * @augments ROT.Map\n */\nexport default class Arena extends Map {\n    create(callback) {\n        let w = this._width - 1;\n        let h = this._height - 1;\n        for (let i = 0; i <= w; i++) {\n            for (let j = 0; j <= h; j++) {\n                let empty = (i && j && i < w && j < h);\n                callback(i, j, empty ? 0 : 1);\n            }\n        }\n        return this;\n    }\n}\n", "import Map from \"./map.js\";\n/**\n * @class Dungeon map: has rooms and corridors\n * @augments ROT.Map\n */\nexport default class Dungeon extends Map {\n    constructor(width, height) {\n        super(width, height);\n        this._rooms = [];\n        this._corridors = [];\n    }\n    /**\n     * Get all generated rooms\n     * @returns {ROT.Map.Feature.Room[]}\n     */\n    getRooms() { return this._rooms; }\n    /**\n     * Get all generated corridors\n     * @returns {ROT.Map.Feature.Corridor[]}\n     */\n    getCorridors() { return this._corridors; }\n}\n", "import RNG from \"../rng.js\";\n;\n/**\n * @class Dungeon feature; has own .create() method\n */\nclass Feature {\n}\n/**\n * @class Room\n * @augments ROT.Map.Feature\n * @param {int} x1\n * @param {int} y1\n * @param {int} x2\n * @param {int} y2\n * @param {int} [doorX]\n * @param {int} [doorY]\n */\nexport class Room extends Feature {\n    constructor(x1, y1, x2, y2, doorX, doorY) {\n        super();\n        this._x1 = x1;\n        this._y1 = y1;\n        this._x2 = x2;\n        this._y2 = y2;\n        this._doors = {};\n        if (doorX !== undefined && doorY !== undefined) {\n            this.addDoor(doorX, doorY);\n        }\n    }\n    ;\n    /**\n     * Room of random size, with a given doors and direction\n     */\n    static createRandomAt(x, y, dx, dy, options) {\n        let min = options.roomWidth[0];\n        let max = options.roomWidth[1];\n        let width = RNG.getUniformInt(min, max);\n        min = options.roomHeight[0];\n        max = options.roomHeight[1];\n        let height = RNG.getUniformInt(min, max);\n        if (dx == 1) { /* to the right */\n            let y2 = y - Math.floor(RNG.getUniform() * height);\n            return new this(x + 1, y2, x + width, y2 + height - 1, x, y);\n        }\n        if (dx == -1) { /* to the left */\n            let y2 = y - Math.floor(RNG.getUniform() * height);\n            return new this(x - width, y2, x - 1, y2 + height - 1, x, y);\n        }\n        if (dy == 1) { /* to the bottom */\n            let x2 = x - Math.floor(RNG.getUniform() * width);\n            return new this(x2, y + 1, x2 + width - 1, y + height, x, y);\n        }\n        if (dy == -1) { /* to the top */\n            let x2 = x - Math.floor(RNG.getUniform() * width);\n            return new this(x2, y - height, x2 + width - 1, y - 1, x, y);\n        }\n        throw new Error(\"dx or dy must be 1 or -1\");\n    }\n    /**\n     * Room of random size, positioned around center coords\n     */\n    static createRandomCenter(cx, cy, options) {\n        let min = options.roomWidth[0];\n        let max = options.roomWidth[1];\n        let width = RNG.getUniformInt(min, max);\n        min = options.roomHeight[0];\n        max = options.roomHeight[1];\n        let height = RNG.getUniformInt(min, max);\n        let x1 = cx - Math.floor(RNG.getUniform() * width);\n        let y1 = cy - Math.floor(RNG.getUniform() * height);\n        let x2 = x1 + width - 1;\n        let y2 = y1 + height - 1;\n        return new this(x1, y1, x2, y2);\n    }\n    /**\n     * Room of random size within a given dimensions\n     */\n    static createRandom(availWidth, availHeight, options) {\n        let min = options.roomWidth[0];\n        let max = options.roomWidth[1];\n        let width = RNG.getUniformInt(min, max);\n        min = options.roomHeight[0];\n        max = options.roomHeight[1];\n        let height = RNG.getUniformInt(min, max);\n        let left = availWidth - width - 1;\n        let top = availHeight - height - 1;\n        let x1 = 1 + Math.floor(RNG.getUniform() * left);\n        let y1 = 1 + Math.floor(RNG.getUniform() * top);\n        let x2 = x1 + width - 1;\n        let y2 = y1 + height - 1;\n        return new this(x1, y1, x2, y2);\n    }\n    addDoor(x, y) {\n        this._doors[x + \",\" + y] = 1;\n        return this;\n    }\n    /**\n     * @param {function}\n     */\n    getDoors(cb) {\n        for (let key in this._doors) {\n            let parts = key.split(\",\");\n            cb(parseInt(parts[0]), parseInt(parts[1]));\n        }\n        return this;\n    }\n    clearDoors() {\n        this._doors = {};\n        return this;\n    }\n    addDoors(isWallCallback) {\n        let left = this._x1 - 1;\n        let right = this._x2 + 1;\n        let top = this._y1 - 1;\n        let bottom = this._y2 + 1;\n        for (let x = left; x <= right; x++) {\n            for (let y = top; y <= bottom; y++) {\n                if (x != left && x != right && y != top && y != bottom) {\n                    continue;\n                }\n                if (isWallCallback(x, y)) {\n                    continue;\n                }\n                this.addDoor(x, y);\n            }\n        }\n        return this;\n    }\n    debug() {\n        console.log(\"room\", this._x1, this._y1, this._x2, this._y2);\n    }\n    isValid(isWallCallback, canBeDugCallback) {\n        let left = this._x1 - 1;\n        let right = this._x2 + 1;\n        let top = this._y1 - 1;\n        let bottom = this._y2 + 1;\n        for (let x = left; x <= right; x++) {\n            for (let y = top; y <= bottom; y++) {\n                if (x == left || x == right || y == top || y == bottom) {\n                    if (!isWallCallback(x, y)) {\n                        return false;\n                    }\n                }\n                else {\n                    if (!canBeDugCallback(x, y)) {\n                        return false;\n                    }\n                }\n            }\n        }\n        return true;\n    }\n    /**\n     * @param {function} digCallback Dig callback with a signature (x, y, value). Values: 0 = empty, 1 = wall, 2 = door. Multiple doors are allowed.\n     */\n    create(digCallback) {\n        let left = this._x1 - 1;\n        let right = this._x2 + 1;\n        let top = this._y1 - 1;\n        let bottom = this._y2 + 1;\n        let value = 0;\n        for (let x = left; x <= right; x++) {\n            for (let y = top; y <= bottom; y++) {\n                if (x + \",\" + y in this._doors) {\n                    value = 2;\n                }\n                else if (x == left || x == right || y == top || y == bottom) {\n                    value = 1;\n                }\n                else {\n                    value = 0;\n                }\n                digCallback(x, y, value);\n            }\n        }\n    }\n    getCenter() {\n        return [Math.round((this._x1 + this._x2) / 2), Math.round((this._y1 + this._y2) / 2)];\n    }\n    getLeft() { return this._x1; }\n    getRight() { return this._x2; }\n    getTop() { return this._y1; }\n    getBottom() { return this._y2; }\n}\n/**\n * @class Corridor\n * @augments ROT.Map.Feature\n * @param {int} startX\n * @param {int} startY\n * @param {int} endX\n * @param {int} endY\n */\nexport class Corridor extends Feature {\n    constructor(startX, startY, endX, endY) {\n        super();\n        this._startX = startX;\n        this._startY = startY;\n        this._endX = endX;\n        this._endY = endY;\n        this._endsWithAWall = true;\n    }\n    static createRandomAt(x, y, dx, dy, options) {\n        let min = options.corridorLength[0];\n        let max = options.corridorLength[1];\n        let length = RNG.getUniformInt(min, max);\n        return new this(x, y, x + dx * length, y + dy * length);\n    }\n    debug() {\n        console.log(\"corridor\", this._startX, this._startY, this._endX, this._endY);\n    }\n    isValid(isWallCallback, canBeDugCallback) {\n        let sx = this._startX;\n        let sy = this._startY;\n        let dx = this._endX - sx;\n        let dy = this._endY - sy;\n        let length = 1 + Math.max(Math.abs(dx), Math.abs(dy));\n        if (dx) {\n            dx = dx / Math.abs(dx);\n        }\n        if (dy) {\n            dy = dy / Math.abs(dy);\n        }\n        let nx = dy;\n        let ny = -dx;\n        let ok = true;\n        for (let i = 0; i < length; i++) {\n            let x = sx + i * dx;\n            let y = sy + i * dy;\n            if (!canBeDugCallback(x, y)) {\n                ok = false;\n            }\n            if (!isWallCallback(x + nx, y + ny)) {\n                ok = false;\n            }\n            if (!isWallCallback(x - nx, y - ny)) {\n                ok = false;\n            }\n            if (!ok) {\n                length = i;\n                this._endX = x - dx;\n                this._endY = y - dy;\n                break;\n            }\n        }\n        /**\n         * If the length degenerated, this corridor might be invalid\n         */\n        /* not supported */\n        if (length == 0) {\n            return false;\n        }\n        /* length 1 allowed only if the next space is empty */\n        if (length == 1 && isWallCallback(this._endX + dx, this._endY + dy)) {\n            return false;\n        }\n        /**\n         * We do not want the corridor to crash into a corner of a room;\n         * if any of the ending corners is empty, the N+1th cell of this corridor must be empty too.\n         *\n         * Situation:\n         * #######1\n         * .......?\n         * #######2\n         *\n         * The corridor was dug from left to right.\n         * 1, 2 - problematic corners, ? = N+1th cell (not dug)\n         */\n        let firstCornerBad = !isWallCallback(this._endX + dx + nx, this._endY + dy + ny);\n        let secondCornerBad = !isWallCallback(this._endX + dx - nx, this._endY + dy - ny);\n        this._endsWithAWall = isWallCallback(this._endX + dx, this._endY + dy);\n        if ((firstCornerBad || secondCornerBad) && this._endsWithAWall) {\n            return false;\n        }\n        return true;\n    }\n    /**\n     * @param {function} digCallback Dig callback with a signature (x, y, value). Values: 0 = empty.\n     */\n    create(digCallback) {\n        let sx = this._startX;\n        let sy = this._startY;\n        let dx = this._endX - sx;\n        let dy = this._endY - sy;\n        let length = 1 + Math.max(Math.abs(dx), Math.abs(dy));\n        if (dx) {\n            dx = dx / Math.abs(dx);\n        }\n        if (dy) {\n            dy = dy / Math.abs(dy);\n        }\n        for (let i = 0; i < length; i++) {\n            let x = sx + i * dx;\n            let y = sy + i * dy;\n            digCallback(x, y, 0);\n        }\n        return true;\n    }\n    createPriorityWalls(priorityWallCallback) {\n        if (!this._endsWithAWall) {\n            return;\n        }\n        let sx = this._startX;\n        let sy = this._startY;\n        let dx = this._endX - sx;\n        let dy = this._endY - sy;\n        if (dx) {\n            dx = dx / Math.abs(dx);\n        }\n        if (dy) {\n            dy = dy / Math.abs(dy);\n        }\n        let nx = dy;\n        let ny = -dx;\n        priorityWallCallback(this._endX + dx, this._endY + dy);\n        priorityWallCallback(this._endX + nx, this._endY + ny);\n        priorityWallCallback(this._endX - nx, this._endY - ny);\n    }\n}\n", "import Dungeon from \"./dungeon.js\";\nimport { Room, Corridor } from \"./features.js\";\nimport RNG from \"../rng.js\";\n;\n/**\n * @class Dungeon generator which tries to fill the space evenly. Generates independent rooms and tries to connect them.\n * @augments ROT.Map.Dungeon\n */\nexport default class Uniform extends Dungeon {\n    constructor(width, height, options) {\n        super(width, height);\n        this._options = {\n            roomWidth: [3, 9],\n            roomHeight: [3, 5],\n            roomDugPercentage: 0.1,\n            timeLimit: 1000 /* we stop after this much time has passed (msec) */\n        };\n        Object.assign(this._options, options);\n        this._map = [];\n        this._dug = 0;\n        this._roomAttempts = 20; /* new room is created N-times until is considered as impossible to generate */\n        this._corridorAttempts = 20; /* corridors are tried N-times until the level is considered as impossible to connect */\n        this._connected = []; /* list of already connected rooms */\n        this._unconnected = []; /* list of remaining unconnected rooms */\n        this._digCallback = this._digCallback.bind(this);\n        this._canBeDugCallback = this._canBeDugCallback.bind(this);\n        this._isWallCallback = this._isWallCallback.bind(this);\n    }\n    /**\n     * Create a map. If the time limit has been hit, returns null.\n     * @see ROT.Map#create\n     */\n    create(callback) {\n        let t1 = Date.now();\n        while (1) {\n            let t2 = Date.now();\n            if (t2 - t1 > this._options.timeLimit) {\n                return null;\n            } /* time limit! */\n            this._map = this._fillMap(1);\n            this._dug = 0;\n            this._rooms = [];\n            this._unconnected = [];\n            this._generateRooms();\n            if (this._rooms.length < 2) {\n                continue;\n            }\n            if (this._generateCorridors()) {\n                break;\n            }\n        }\n        if (callback) {\n            for (let i = 0; i < this._width; i++) {\n                for (let j = 0; j < this._height; j++) {\n                    callback(i, j, this._map[i][j]);\n                }\n            }\n        }\n        return this;\n    }\n    /**\n     * Generates a suitable amount of rooms\n     */\n    _generateRooms() {\n        let w = this._width - 2;\n        let h = this._height - 2;\n        let room;\n        do {\n            room = this._generateRoom();\n            if (this._dug / (w * h) > this._options.roomDugPercentage) {\n                break;\n            } /* achieved requested amount of free space */\n        } while (room);\n        /* either enough rooms, or not able to generate more of them :) */\n    }\n    /**\n     * Try to generate one room\n     */\n    _generateRoom() {\n        let count = 0;\n        while (count < this._roomAttempts) {\n            count++;\n            let room = Room.createRandom(this._width, this._height, this._options);\n            if (!room.isValid(this._isWallCallback, this._canBeDugCallback)) {\n                continue;\n            }\n            room.create(this._digCallback);\n            this._rooms.push(room);\n            return room;\n        }\n        /* no room was generated in a given number of attempts */\n        return null;\n    }\n    /**\n     * Generates connectors beween rooms\n     * @returns {bool} success Was this attempt successfull?\n     */\n    _generateCorridors() {\n        let cnt = 0;\n        while (cnt < this._corridorAttempts) {\n            cnt++;\n            this._corridors = [];\n            /* dig rooms into a clear map */\n            this._map = this._fillMap(1);\n            for (let i = 0; i < this._rooms.length; i++) {\n                let room = this._rooms[i];\n                room.clearDoors();\n                room.create(this._digCallback);\n            }\n            this._unconnected = RNG.shuffle(this._rooms.slice());\n            this._connected = [];\n            if (this._unconnected.length) {\n                this._connected.push(this._unconnected.pop());\n            } /* first one is always connected */\n            while (1) {\n                /* 1. pick random connected room */\n                let connected = RNG.getItem(this._connected);\n                if (!connected) {\n                    break;\n                }\n                /* 2. find closest unconnected */\n                let room1 = this._closestRoom(this._unconnected, connected);\n                if (!room1) {\n                    break;\n                }\n                /* 3. connect it to closest connected */\n                let room2 = this._closestRoom(this._connected, room1);\n                if (!room2) {\n                    break;\n                }\n                let ok = this._connectRooms(room1, room2);\n                if (!ok) {\n                    break;\n                } /* stop connecting, re-shuffle */\n                if (!this._unconnected.length) {\n                    return true;\n                } /* done; no rooms remain */\n            }\n        }\n        return false;\n    }\n    ;\n    /**\n     * For a given room, find the closest one from the list\n     */\n    _closestRoom(rooms, room) {\n        let dist = Infinity;\n        let center = room.getCenter();\n        let result = null;\n        for (let i = 0; i < rooms.length; i++) {\n            let r = rooms[i];\n            let c = r.getCenter();\n            let dx = c[0] - center[0];\n            let dy = c[1] - center[1];\n            let d = dx * dx + dy * dy;\n            if (d < dist) {\n                dist = d;\n                result = r;\n            }\n        }\n        return result;\n    }\n    _connectRooms(room1, room2) {\n        /*\n            room1.debug();\n            room2.debug();\n        */\n        let center1 = room1.getCenter();\n        let center2 = room2.getCenter();\n        let diffX = center2[0] - center1[0];\n        let diffY = center2[1] - center1[1];\n        let start;\n        let end;\n        let dirIndex1, dirIndex2, min, max, index;\n        if (Math.abs(diffX) < Math.abs(diffY)) { /* first try connecting north-south walls */\n            dirIndex1 = (diffY > 0 ? 2 : 0);\n            dirIndex2 = (dirIndex1 + 2) % 4;\n            min = room2.getLeft();\n            max = room2.getRight();\n            index = 0;\n        }\n        else { /* first try connecting east-west walls */\n            dirIndex1 = (diffX > 0 ? 1 : 3);\n            dirIndex2 = (dirIndex1 + 2) % 4;\n            min = room2.getTop();\n            max = room2.getBottom();\n            index = 1;\n        }\n        start = this._placeInWall(room1, dirIndex1); /* corridor will start here */\n        if (!start) {\n            return false;\n        }\n        if (start[index] >= min && start[index] <= max) { /* possible to connect with straight line (I-like) */\n            end = start.slice();\n            let value = 0;\n            switch (dirIndex2) {\n                case 0:\n                    value = room2.getTop() - 1;\n                    break;\n                case 1:\n                    value = room2.getRight() + 1;\n                    break;\n                case 2:\n                    value = room2.getBottom() + 1;\n                    break;\n                case 3:\n                    value = room2.getLeft() - 1;\n                    break;\n            }\n            end[(index + 1) % 2] = value;\n            this._digLine([start, end]);\n        }\n        else if (start[index] < min - 1 || start[index] > max + 1) { /* need to switch target wall (L-like) */\n            let diff = start[index] - center2[index];\n            let rotation = 0;\n            switch (dirIndex2) {\n                case 0:\n                case 1:\n                    rotation = (diff < 0 ? 3 : 1);\n                    break;\n                case 2:\n                case 3:\n                    rotation = (diff < 0 ? 1 : 3);\n                    break;\n            }\n            dirIndex2 = (dirIndex2 + rotation) % 4;\n            end = this._placeInWall(room2, dirIndex2);\n            if (!end) {\n                return false;\n            }\n            let mid = [0, 0];\n            mid[index] = start[index];\n            let index2 = (index + 1) % 2;\n            mid[index2] = end[index2];\n            this._digLine([start, mid, end]);\n        }\n        else { /* use current wall pair, but adjust the line in the middle (S-like) */\n            let index2 = (index + 1) % 2;\n            end = this._placeInWall(room2, dirIndex2);\n            if (!end) {\n                return false;\n            }\n            let mid = Math.round((end[index2] + start[index2]) / 2);\n            let mid1 = [0, 0];\n            let mid2 = [0, 0];\n            mid1[index] = start[index];\n            mid1[index2] = mid;\n            mid2[index] = end[index];\n            mid2[index2] = mid;\n            this._digLine([start, mid1, mid2, end]);\n        }\n        room1.addDoor(start[0], start[1]);\n        room2.addDoor(end[0], end[1]);\n        index = this._unconnected.indexOf(room1);\n        if (index != -1) {\n            this._unconnected.splice(index, 1);\n            this._connected.push(room1);\n        }\n        index = this._unconnected.indexOf(room2);\n        if (index != -1) {\n            this._unconnected.splice(index, 1);\n            this._connected.push(room2);\n        }\n        return true;\n    }\n    _placeInWall(room, dirIndex) {\n        let start = [0, 0];\n        let dir = [0, 0];\n        let length = 0;\n        switch (dirIndex) {\n            case 0:\n                dir = [1, 0];\n                start = [room.getLeft(), room.getTop() - 1];\n                length = room.getRight() - room.getLeft() + 1;\n                break;\n            case 1:\n                dir = [0, 1];\n                start = [room.getRight() + 1, room.getTop()];\n                length = room.getBottom() - room.getTop() + 1;\n                break;\n            case 2:\n                dir = [1, 0];\n                start = [room.getLeft(), room.getBottom() + 1];\n                length = room.getRight() - room.getLeft() + 1;\n                break;\n            case 3:\n                dir = [0, 1];\n                start = [room.getLeft() - 1, room.getTop()];\n                length = room.getBottom() - room.getTop() + 1;\n                break;\n        }\n        let avail = [];\n        let lastBadIndex = -2;\n        for (let i = 0; i < length; i++) {\n            let x = start[0] + i * dir[0];\n            let y = start[1] + i * dir[1];\n            avail.push(null);\n            let isWall = (this._map[x][y] == 1);\n            if (isWall) {\n                if (lastBadIndex != i - 1) {\n                    avail[i] = [x, y];\n                }\n            }\n            else {\n                lastBadIndex = i;\n                if (i) {\n                    avail[i - 1] = null;\n                }\n            }\n        }\n        for (let i = avail.length - 1; i >= 0; i--) {\n            if (!avail[i]) {\n                avail.splice(i, 1);\n            }\n        }\n        return (avail.length ? RNG.getItem(avail) : null);\n    }\n    /**\n     * Dig a polyline.\n     */\n    _digLine(points) {\n        for (let i = 1; i < points.length; i++) {\n            let start = points[i - 1];\n            let end = points[i];\n            let corridor = new Corridor(start[0], start[1], end[0], end[1]);\n            corridor.create(this._digCallback);\n            this._corridors.push(corridor);\n        }\n    }\n    _digCallback(x, y, value) {\n        this._map[x][y] = value;\n        if (value == 0) {\n            this._dug++;\n        }\n    }\n    _isWallCallback(x, y) {\n        if (x < 0 || y < 0 || x >= this._width || y >= this._height) {\n            return false;\n        }\n        return (this._map[x][y] == 1);\n    }\n    _canBeDugCallback(x, y) {\n        if (x < 1 || y < 1 || x + 1 >= this._width || y + 1 >= this._height) {\n            return false;\n        }\n        return (this._map[x][y] == 1);\n    }\n}\n", "import Map from \"./map.js\";\nimport { DIRS } from \"../constants.js\";\nimport RNG from \"../rng.js\";\n;\n/**\n * @class Cellular automaton map generator\n * @augments ROT.Map\n * @param {int} [width=ROT.DEFAULT_WIDTH]\n * @param {int} [height=ROT.DEFAULT_HEIGHT]\n * @param {object} [options] Options\n * @param {int[]} [options.born] List of neighbor counts for a new cell to be born in empty space\n * @param {int[]} [options.survive] List of neighbor counts for an existing  cell to survive\n * @param {int} [options.topology] Topology 4 or 6 or 8\n */\nexport default class Cellular extends Map {\n    constructor(width, height, options = {}) {\n        super(width, height);\n        this._options = {\n            born: [5, 6, 7, 8],\n            survive: [4, 5, 6, 7, 8],\n            topology: 8\n        };\n        this.setOptions(options);\n        this._dirs = DIRS[this._options.topology];\n        this._map = this._fillMap(0);\n    }\n    /**\n     * Fill the map with random values\n     * @param {float} probability Probability for a cell to become alive; 0 = all empty, 1 = all full\n     */\n    randomize(probability) {\n        for (let i = 0; i < this._width; i++) {\n            for (let j = 0; j < this._height; j++) {\n                this._map[i][j] = (RNG.getUniform() < probability ? 1 : 0);\n            }\n        }\n        return this;\n    }\n    /**\n     * Change options.\n     * @see ROT.Map.Cellular\n     */\n    setOptions(options) { Object.assign(this._options, options); }\n    set(x, y, value) { this._map[x][y] = value; }\n    create(callback) {\n        let newMap = this._fillMap(0);\n        let born = this._options.born;\n        let survive = this._options.survive;\n        for (let j = 0; j < this._height; j++) {\n            let widthStep = 1;\n            let widthStart = 0;\n            if (this._options.topology == 6) {\n                widthStep = 2;\n                widthStart = j % 2;\n            }\n            for (let i = widthStart; i < this._width; i += widthStep) {\n                let cur = this._map[i][j];\n                let ncount = this._getNeighbors(i, j);\n                if (cur && survive.indexOf(ncount) != -1) { /* survive */\n                    newMap[i][j] = 1;\n                }\n                else if (!cur && born.indexOf(ncount) != -1) { /* born */\n                    newMap[i][j] = 1;\n                }\n            }\n        }\n        this._map = newMap;\n        callback && this._serviceCallback(callback);\n    }\n    _serviceCallback(callback) {\n        for (let j = 0; j < this._height; j++) {\n            let widthStep = 1;\n            let widthStart = 0;\n            if (this._options.topology == 6) {\n                widthStep = 2;\n                widthStart = j % 2;\n            }\n            for (let i = widthStart; i < this._width; i += widthStep) {\n                callback(i, j, this._map[i][j]);\n            }\n        }\n    }\n    /**\n     * Get neighbor count at [i,j] in this._map\n     */\n    _getNeighbors(cx, cy) {\n        let result = 0;\n        for (let i = 0; i < this._dirs.length; i++) {\n            let dir = this._dirs[i];\n            let x = cx + dir[0];\n            let y = cy + dir[1];\n            if (x < 0 || x >= this._width || y < 0 || y >= this._height) {\n                continue;\n            }\n            result += (this._map[x][y] == 1 ? 1 : 0);\n        }\n        return result;\n    }\n    /**\n     * Make sure every non-wall space is accessible.\n     * @param {function} callback to call to display map when do\n     * @param {int} value to consider empty space - defaults to 0\n     * @param {function} callback to call when a new connection is made\n     */\n    connect(callback, value, connectionCallback) {\n        if (!value)\n            value = 0;\n        let allFreeSpace = [];\n        let notConnected = {};\n        // find all free space\n        let widthStep = 1;\n        let widthStarts = [0, 0];\n        if (this._options.topology == 6) {\n            widthStep = 2;\n            widthStarts = [0, 1];\n        }\n        for (let y = 0; y < this._height; y++) {\n            for (let x = widthStarts[y % 2]; x < this._width; x += widthStep) {\n                if (this._freeSpace(x, y, value)) {\n                    let p = [x, y];\n                    notConnected[this._pointKey(p)] = p;\n                    allFreeSpace.push([x, y]);\n                }\n            }\n        }\n        let start = allFreeSpace[RNG.getUniformInt(0, allFreeSpace.length - 1)];\n        let key = this._pointKey(start);\n        let connected = {};\n        connected[key] = start;\n        delete notConnected[key];\n        // find what's connected to the starting point\n        this._findConnected(connected, notConnected, [start], false, value);\n        while (Object.keys(notConnected).length > 0) {\n            // find two points from notConnected to connected\n            let p = this._getFromTo(connected, notConnected);\n            let from = p[0]; // notConnected\n            let to = p[1]; // connected\n            // find everything connected to the starting point\n            let local = {};\n            local[this._pointKey(from)] = from;\n            this._findConnected(local, notConnected, [from], true, value);\n            // connect to a connected cell\n            let tunnelFn = (this._options.topology == 6 ? this._tunnelToConnected6 : this._tunnelToConnected);\n            tunnelFn.call(this, to, from, connected, notConnected, value, connectionCallback);\n            // now all of local is connected\n            for (let k in local) {\n                let pp = local[k];\n                this._map[pp[0]][pp[1]] = value;\n                connected[k] = pp;\n                delete notConnected[k];\n            }\n        }\n        callback && this._serviceCallback(callback);\n    }\n    /**\n     * Find random points to connect. Search for the closest point in the larger space.\n     * This is to minimize the length of the passage while maintaining good performance.\n     */\n    _getFromTo(connected, notConnected) {\n        let from = [0, 0], to = [0, 0], d;\n        let connectedKeys = Object.keys(connected);\n        let notConnectedKeys = Object.keys(notConnected);\n        for (let i = 0; i < 5; i++) {\n            if (connectedKeys.length < notConnectedKeys.length) {\n                let keys = connectedKeys;\n                to = connected[keys[RNG.getUniformInt(0, keys.length - 1)]];\n                from = this._getClosest(to, notConnected);\n            }\n            else {\n                let keys = notConnectedKeys;\n                from = notConnected[keys[RNG.getUniformInt(0, keys.length - 1)]];\n                to = this._getClosest(from, connected);\n            }\n            d = (from[0] - to[0]) * (from[0] - to[0]) + (from[1] - to[1]) * (from[1] - to[1]);\n            if (d < 64) {\n                break;\n            }\n        }\n        // console.log(\">>> connected=\" + to + \" notConnected=\" + from + \" dist=\" + d);\n        return [from, to];\n    }\n    _getClosest(point, space) {\n        let minPoint = null;\n        let minDist = null;\n        for (let k in space) {\n            let p = space[k];\n            let d = (p[0] - point[0]) * (p[0] - point[0]) + (p[1] - point[1]) * (p[1] - point[1]);\n            if (minDist == null || d < minDist) {\n                minDist = d;\n                minPoint = p;\n            }\n        }\n        return minPoint;\n    }\n    _findConnected(connected, notConnected, stack, keepNotConnected, value) {\n        while (stack.length > 0) {\n            let p = stack.splice(0, 1)[0];\n            let tests;\n            if (this._options.topology == 6) {\n                tests = [\n                    [p[0] + 2, p[1]],\n                    [p[0] + 1, p[1] - 1],\n                    [p[0] - 1, p[1] - 1],\n                    [p[0] - 2, p[1]],\n                    [p[0] - 1, p[1] + 1],\n                    [p[0] + 1, p[1] + 1],\n                ];\n            }\n            else {\n                tests = [\n                    [p[0] + 1, p[1]],\n                    [p[0] - 1, p[1]],\n                    [p[0], p[1] + 1],\n                    [p[0], p[1] - 1]\n                ];\n            }\n            for (let i = 0; i < tests.length; i++) {\n                let key = this._pointKey(tests[i]);\n                if (connected[key] == null && this._freeSpace(tests[i][0], tests[i][1], value)) {\n                    connected[key] = tests[i];\n                    if (!keepNotConnected) {\n                        delete notConnected[key];\n                    }\n                    stack.push(tests[i]);\n                }\n            }\n        }\n    }\n    _tunnelToConnected(to, from, connected, notConnected, value, connectionCallback) {\n        let a, b;\n        if (from[0] < to[0]) {\n            a = from;\n            b = to;\n        }\n        else {\n            a = to;\n            b = from;\n        }\n        for (let xx = a[0]; xx <= b[0]; xx++) {\n            this._map[xx][a[1]] = value;\n            let p = [xx, a[1]];\n            let pkey = this._pointKey(p);\n            connected[pkey] = p;\n            delete notConnected[pkey];\n        }\n        if (connectionCallback && a[0] < b[0]) {\n            connectionCallback(a, [b[0], a[1]]);\n        }\n        // x is now fixed\n        let x = b[0];\n        if (from[1] < to[1]) {\n            a = from;\n            b = to;\n        }\n        else {\n            a = to;\n            b = from;\n        }\n        for (let yy = a[1]; yy < b[1]; yy++) {\n            this._map[x][yy] = value;\n            let p = [x, yy];\n            let pkey = this._pointKey(p);\n            connected[pkey] = p;\n            delete notConnected[pkey];\n        }\n        if (connectionCallback && a[1] < b[1]) {\n            connectionCallback([b[0], a[1]], [b[0], b[1]]);\n        }\n    }\n    _tunnelToConnected6(to, from, connected, notConnected, value, connectionCallback) {\n        let a, b;\n        if (from[0] < to[0]) {\n            a = from;\n            b = to;\n        }\n        else {\n            a = to;\n            b = from;\n        }\n        // tunnel diagonally until horizontally level\n        let xx = a[0];\n        let yy = a[1];\n        while (!(xx == b[0] && yy == b[1])) {\n            let stepWidth = 2;\n            if (yy < b[1]) {\n                yy++;\n                stepWidth = 1;\n            }\n            else if (yy > b[1]) {\n                yy--;\n                stepWidth = 1;\n            }\n            if (xx < b[0]) {\n                xx += stepWidth;\n            }\n            else if (xx > b[0]) {\n                xx -= stepWidth;\n            }\n            else if (b[1] % 2) {\n                // Won't step outside map if destination on is map's right edge\n                xx -= stepWidth;\n            }\n            else {\n                // ditto for left edge\n                xx += stepWidth;\n            }\n            this._map[xx][yy] = value;\n            let p = [xx, yy];\n            let pkey = this._pointKey(p);\n            connected[pkey] = p;\n            delete notConnected[pkey];\n        }\n        if (connectionCallback) {\n            connectionCallback(from, to);\n        }\n    }\n    _freeSpace(x, y, value) {\n        return x >= 0 && x < this._width && y >= 0 && y < this._height && this._map[x][y] == value;\n    }\n    _pointKey(p) { return p[0] + \".\" + p[1]; }\n}\n", "import Dungeon from \"./dungeon.js\";\nimport { Room, Corridor } from \"./features.js\";\nimport RNG from \"../rng.js\";\nimport { DIRS } from \"../constants.js\";\nconst FEATURES = {\n    \"room\": Room,\n    \"corridor\": Corridor\n};\n/**\n * Random dungeon generator using human-like digging patterns.\n * Heavily based on Mike Anderson's ideas from the \"Tyrant\" algo, mentioned at\n * http://roguebasin.com/index.php/Dungeon-Building_Algorithm\n */\nexport default class Digger extends Dungeon {\n    constructor(width, height, options = {}) {\n        super(width, height);\n        this._options = Object.assign({\n            roomWidth: [3, 9],\n            roomHeight: [3, 5],\n            corridorLength: [3, 10],\n            dugPercentage: 0.2,\n            timeLimit: 1000 /* we stop after this much time has passed (msec) */\n        }, options);\n        this._features = {\n            \"room\": 4,\n            \"corridor\": 4\n        };\n        this._map = [];\n        this._featureAttempts = 20; /* how many times do we try to create a feature on a suitable wall */\n        this._walls = {}; /* these are available for digging */\n        this._dug = 0;\n        this._digCallback = this._digCallback.bind(this);\n        this._canBeDugCallback = this._canBeDugCallback.bind(this);\n        this._isWallCallback = this._isWallCallback.bind(this);\n        this._priorityWallCallback = this._priorityWallCallback.bind(this);\n    }\n    create(callback) {\n        this._rooms = [];\n        this._corridors = [];\n        this._map = this._fillMap(1);\n        this._walls = {};\n        this._dug = 0;\n        let area = (this._width - 2) * (this._height - 2);\n        this._firstRoom();\n        let t1 = Date.now();\n        let priorityWalls;\n        do {\n            priorityWalls = 0;\n            let t2 = Date.now();\n            if (t2 - t1 > this._options.timeLimit) {\n                break;\n            }\n            /* find a good wall */\n            let wall = this._findWall();\n            if (!wall) {\n                break;\n            } /* no more walls */\n            let parts = wall.split(\",\");\n            let x = parseInt(parts[0]);\n            let y = parseInt(parts[1]);\n            let dir = this._getDiggingDirection(x, y);\n            if (!dir) {\n                continue;\n            } /* this wall is not suitable */\n            //\t\tconsole.log(\"wall\", x, y);\n            /* try adding a feature */\n            let featureAttempts = 0;\n            do {\n                featureAttempts++;\n                if (this._tryFeature(x, y, dir[0], dir[1])) { /* feature added */\n                    //if (this._rooms.length + this._corridors.length == 2) { this._rooms[0].addDoor(x, y); } /* first room oficially has doors */\n                    this._removeSurroundingWalls(x, y);\n                    this._removeSurroundingWalls(x - dir[0], y - dir[1]);\n                    break;\n                }\n            } while (featureAttempts < this._featureAttempts);\n            for (let id in this._walls) {\n                if (this._walls[id] > 1) {\n                    priorityWalls++;\n                }\n            }\n        } while (this._dug / area < this._options.dugPercentage || priorityWalls); /* fixme number of priority walls */\n        this._addDoors();\n        if (callback) {\n            for (let i = 0; i < this._width; i++) {\n                for (let j = 0; j < this._height; j++) {\n                    callback(i, j, this._map[i][j]);\n                }\n            }\n        }\n        this._walls = {};\n        this._map = [];\n        return this;\n    }\n    _digCallback(x, y, value) {\n        if (value == 0 || value == 2) { /* empty */\n            this._map[x][y] = 0;\n            this._dug++;\n        }\n        else { /* wall */\n            this._walls[x + \",\" + y] = 1;\n        }\n    }\n    _isWallCallback(x, y) {\n        if (x < 0 || y < 0 || x >= this._width || y >= this._height) {\n            return false;\n        }\n        return (this._map[x][y] == 1);\n    }\n    _canBeDugCallback(x, y) {\n        if (x < 1 || y < 1 || x + 1 >= this._width || y + 1 >= this._height) {\n            return false;\n        }\n        return (this._map[x][y] == 1);\n    }\n    _priorityWallCallback(x, y) { this._walls[x + \",\" + y] = 2; }\n    ;\n    _firstRoom() {\n        let cx = Math.floor(this._width / 2);\n        let cy = Math.floor(this._height / 2);\n        let room = Room.createRandomCenter(cx, cy, this._options);\n        this._rooms.push(room);\n        room.create(this._digCallback);\n    }\n    /**\n     * Get a suitable wall\n     */\n    _findWall() {\n        let prio1 = [];\n        let prio2 = [];\n        for (let id in this._walls) {\n            let prio = this._walls[id];\n            if (prio == 2) {\n                prio2.push(id);\n            }\n            else {\n                prio1.push(id);\n            }\n        }\n        let arr = (prio2.length ? prio2 : prio1);\n        if (!arr.length) {\n            return null;\n        } /* no walls :/ */\n        let id = RNG.getItem(arr.sort()); // sort to make the order deterministic\n        delete this._walls[id];\n        return id;\n    }\n    /**\n     * Tries adding a feature\n     * @returns {bool} was this a successful try?\n     */\n    _tryFeature(x, y, dx, dy) {\n        let featureName = RNG.getWeightedValue(this._features);\n        let ctor = FEATURES[featureName];\n        let feature = ctor.createRandomAt(x, y, dx, dy, this._options);\n        if (!feature.isValid(this._isWallCallback, this._canBeDugCallback)) {\n            //\t\tconsole.log(\"not valid\");\n            //\t\tfeature.debug();\n            return false;\n        }\n        feature.create(this._digCallback);\n        //\tfeature.debug();\n        if (feature instanceof Room) {\n            this._rooms.push(feature);\n        }\n        if (feature instanceof Corridor) {\n            feature.createPriorityWalls(this._priorityWallCallback);\n            this._corridors.push(feature);\n        }\n        return true;\n    }\n    _removeSurroundingWalls(cx, cy) {\n        let deltas = DIRS[4];\n        for (let i = 0; i < deltas.length; i++) {\n            let delta = deltas[i];\n            let x = cx + delta[0];\n            let y = cy + delta[1];\n            delete this._walls[x + \",\" + y];\n            x = cx + 2 * delta[0];\n            y = cy + 2 * delta[1];\n            delete this._walls[x + \",\" + y];\n        }\n    }\n    /**\n     * Returns vector in \"digging\" direction, or false, if this does not exist (or is not unique)\n     */\n    _getDiggingDirection(cx, cy) {\n        if (cx <= 0 || cy <= 0 || cx >= this._width - 1 || cy >= this._height - 1) {\n            return null;\n        }\n        let result = null;\n        let deltas = DIRS[4];\n        for (let i = 0; i < deltas.length; i++) {\n            let delta = deltas[i];\n            let x = cx + delta[0];\n            let y = cy + delta[1];\n            if (!this._map[x][y]) { /* there already is another empty neighbor! */\n                if (result) {\n                    return null;\n                }\n                result = delta;\n            }\n        }\n        /* no empty neighbor */\n        if (!result) {\n            return null;\n        }\n        return [-result[0], -result[1]];\n    }\n    /**\n     * Find empty spaces surrounding rooms, and apply doors.\n     */\n    _addDoors() {\n        let data = this._map;\n        function isWallCallback(x, y) {\n            return (data[x][y] == 1);\n        }\n        ;\n        for (let i = 0; i < this._rooms.length; i++) {\n            let room = this._rooms[i];\n            room.clearDoors();\n            room.addDoors(isWallCallback);\n        }\n    }\n}\n", "import Map from \"./map.js\";\nimport RNG from \"../rng.js\";\n/**\n * Join lists with \"i\" and \"i+1\"\n */\nfunction addToList(i, L, R) {\n    R[L[i + 1]] = R[i];\n    L[R[i]] = L[i + 1];\n    R[i] = i + 1;\n    L[i + 1] = i;\n}\n/**\n * Remove \"i\" from its list\n */\nfunction removeFromList(i, L, R) {\n    R[L[i]] = R[i];\n    L[R[i]] = L[i];\n    R[i] = i;\n    L[i] = i;\n}\n/**\n * Maze generator - Eller's algorithm\n * See http://homepages.cwi.nl/~tromp/maze.html for explanation\n */\nexport default class EllerMaze extends Map {\n    create(callback) {\n        let map = this._fillMap(1);\n        let w = Math.ceil((this._width - 2) / 2);\n        let rand = 9 / 24;\n        let L = [];\n        let R = [];\n        for (let i = 0; i < w; i++) {\n            L.push(i);\n            R.push(i);\n        }\n        L.push(w - 1); /* fake stop-block at the right side */\n        let j;\n        for (j = 1; j + 3 < this._height; j += 2) {\n            /* one row */\n            for (let i = 0; i < w; i++) {\n                /* cell coords (will be always empty) */\n                let x = 2 * i + 1;\n                let y = j;\n                map[x][y] = 0;\n                /* right connection */\n                if (i != L[i + 1] && RNG.getUniform() > rand) {\n                    addToList(i, L, R);\n                    map[x + 1][y] = 0;\n                }\n                /* bottom connection */\n                if (i != L[i] && RNG.getUniform() > rand) {\n                    /* remove connection */\n                    removeFromList(i, L, R);\n                }\n                else {\n                    /* create connection */\n                    map[x][y + 1] = 0;\n                }\n            }\n        }\n        /* last row */\n        for (let i = 0; i < w; i++) {\n            /* cell coords (will be always empty) */\n            let x = 2 * i + 1;\n            let y = j;\n            map[x][y] = 0;\n            /* right connection */\n            if (i != L[i + 1] && (i == L[i] || RNG.getUniform() > rand)) {\n                /* dig right also if the cell is separated, so it gets connected to the rest of maze */\n                addToList(i, L, R);\n                map[x + 1][y] = 0;\n            }\n            removeFromList(i, L, R);\n        }\n        for (let i = 0; i < this._width; i++) {\n            for (let j = 0; j < this._height; j++) {\n                callback(i, j, map[i][j]);\n            }\n        }\n        return this;\n    }\n}\n", "import Map from \"./map.js\";\nimport RNG from \"../rng.js\";\n/**\n * @class Recursively divided maze, http://en.wikipedia.org/wiki/Maze_generation_algorithm#Recursive_division_method\n * @augments ROT.Map\n */\nexport default class DividedMaze extends Map {\n    constructor() {\n        super(...arguments);\n        this._stack = [];\n        this._map = [];\n    }\n    create(callback) {\n        let w = this._width;\n        let h = this._height;\n        this._map = [];\n        for (let i = 0; i < w; i++) {\n            this._map.push([]);\n            for (let j = 0; j < h; j++) {\n                let border = (i == 0 || j == 0 || i + 1 == w || j + 1 == h);\n                this._map[i].push(border ? 1 : 0);\n            }\n        }\n        this._stack = [\n            [1, 1, w - 2, h - 2]\n        ];\n        this._process();\n        for (let i = 0; i < w; i++) {\n            for (let j = 0; j < h; j++) {\n                callback(i, j, this._map[i][j]);\n            }\n        }\n        this._map = [];\n        return this;\n    }\n    _process() {\n        while (this._stack.length) {\n            let room = this._stack.shift(); /* [left, top, right, bottom] */\n            this._partitionRoom(room);\n        }\n    }\n    _partitionRoom(room) {\n        let availX = [];\n        let availY = [];\n        for (let i = room[0] + 1; i < room[2]; i++) {\n            let top = this._map[i][room[1] - 1];\n            let bottom = this._map[i][room[3] + 1];\n            if (top && bottom && !(i % 2)) {\n                availX.push(i);\n            }\n        }\n        for (let j = room[1] + 1; j < room[3]; j++) {\n            let left = this._map[room[0] - 1][j];\n            let right = this._map[room[2] + 1][j];\n            if (left && right && !(j % 2)) {\n                availY.push(j);\n            }\n        }\n        if (!availX.length || !availY.length) {\n            return;\n        }\n        let x = RNG.getItem(availX);\n        let y = RNG.getItem(availY);\n        this._map[x][y] = 1;\n        let walls = [];\n        let w = [];\n        walls.push(w); /* left part */\n        for (let i = room[0]; i < x; i++) {\n            this._map[i][y] = 1;\n            if (i % 2)\n                w.push([i, y]);\n        }\n        w = [];\n        walls.push(w); /* right part */\n        for (let i = x + 1; i <= room[2]; i++) {\n            this._map[i][y] = 1;\n            if (i % 2)\n                w.push([i, y]);\n        }\n        w = [];\n        walls.push(w); /* top part */\n        for (let j = room[1]; j < y; j++) {\n            this._map[x][j] = 1;\n            if (j % 2)\n                w.push([x, j]);\n        }\n        w = [];\n        walls.push(w); /* bottom part */\n        for (let j = y + 1; j <= room[3]; j++) {\n            this._map[x][j] = 1;\n            if (j % 2)\n                w.push([x, j]);\n        }\n        let solid = RNG.getItem(walls);\n        for (let i = 0; i < walls.length; i++) {\n            let w = walls[i];\n            if (w == solid) {\n                continue;\n            }\n            let hole = RNG.getItem(w);\n            this._map[hole[0]][hole[1]] = 0;\n        }\n        this._stack.push([room[0], room[1], x - 1, y - 1]); /* left top */\n        this._stack.push([x + 1, room[1], room[2], y - 1]); /* right top */\n        this._stack.push([room[0], y + 1, x - 1, room[3]]); /* left bottom */\n        this._stack.push([x + 1, y + 1, room[2], room[3]]); /* right bottom */\n    }\n}\n", "import Map from \"./map.js\";\nimport RNG from \"../rng.js\";\n/**\n * Icey's Maze generator\n * See http://roguebasin.com/index.php/Simple_maze for explanation\n */\nexport default class IceyMaze extends Map {\n    constructor(width, height, regularity = 0) {\n        super(width, height);\n        this._regularity = regularity;\n        this._map = [];\n    }\n    create(callback) {\n        let width = this._width;\n        let height = this._height;\n        let map = this._fillMap(1);\n        width -= (width % 2 ? 1 : 2);\n        height -= (height % 2 ? 1 : 2);\n        let cx = 0;\n        let cy = 0;\n        let nx = 0;\n        let ny = 0;\n        let done = 0;\n        let blocked = false;\n        let dirs = [\n            [0, 0],\n            [0, 0],\n            [0, 0],\n            [0, 0]\n        ];\n        do {\n            cx = 1 + 2 * Math.floor(RNG.getUniform() * (width - 1) / 2);\n            cy = 1 + 2 * Math.floor(RNG.getUniform() * (height - 1) / 2);\n            if (!done) {\n                map[cx][cy] = 0;\n            }\n            if (!map[cx][cy]) {\n                this._randomize(dirs);\n                do {\n                    if (Math.floor(RNG.getUniform() * (this._regularity + 1)) == 0) {\n                        this._randomize(dirs);\n                    }\n                    blocked = true;\n                    for (let i = 0; i < 4; i++) {\n                        nx = cx + dirs[i][0] * 2;\n                        ny = cy + dirs[i][1] * 2;\n                        if (this._isFree(map, nx, ny, width, height)) {\n                            map[nx][ny] = 0;\n                            map[cx + dirs[i][0]][cy + dirs[i][1]] = 0;\n                            cx = nx;\n                            cy = ny;\n                            blocked = false;\n                            done++;\n                            break;\n                        }\n                    }\n                } while (!blocked);\n            }\n        } while (done + 1 < width * height / 4);\n        for (let i = 0; i < this._width; i++) {\n            for (let j = 0; j < this._height; j++) {\n                callback(i, j, map[i][j]);\n            }\n        }\n        this._map = [];\n        return this;\n    }\n    _randomize(dirs) {\n        for (let i = 0; i < 4; i++) {\n            dirs[i][0] = 0;\n            dirs[i][1] = 0;\n        }\n        switch (Math.floor(RNG.getUniform() * 4)) {\n            case 0:\n                dirs[0][0] = -1;\n                dirs[1][0] = 1;\n                dirs[2][1] = -1;\n                dirs[3][1] = 1;\n                break;\n            case 1:\n                dirs[3][0] = -1;\n                dirs[2][0] = 1;\n                dirs[1][1] = -1;\n                dirs[0][1] = 1;\n                break;\n            case 2:\n                dirs[2][0] = -1;\n                dirs[3][0] = 1;\n                dirs[0][1] = -1;\n                dirs[1][1] = 1;\n                break;\n            case 3:\n                dirs[1][0] = -1;\n                dirs[0][0] = 1;\n                dirs[3][1] = -1;\n                dirs[2][1] = 1;\n                break;\n        }\n    }\n    _isFree(map, x, y, width, height) {\n        if (x < 1 || y < 1 || x >= width || y >= height) {\n            return false;\n        }\n        return map[x][y];\n    }\n}\n", "import Map from \"./map.js\";\nimport RNG from \"../rng.js\";\nimport { DIRS } from \"../constants.js\";\n/**\n * Dungeon generator which uses the \"orginal\" Rogue dungeon generation algorithm. See https://github.com/Davidslv/rogue-like/blob/master/docs/references/Mark_Damon_Hughes/07_Roguelike_Dungeon_Generation.md\n * @author hyakugei\n */\nexport default class Rogue extends Map {\n    constructor(width, height, options) {\n        super(width, height);\n        this.map = [];\n        this.rooms = [];\n        this.connectedCells = [];\n        options = Object.assign({\n            cellWidth: 3,\n            cellHeight: 3 //     ie. as an array with min-max values for each direction....\n        }, options);\n        /*\n        Set the room sizes according to the over-all width of the map,\n        and the cell sizes.\n        */\n        if (!options.hasOwnProperty(\"roomWidth\")) {\n            options[\"roomWidth\"] = this._calculateRoomSize(this._width, options[\"cellWidth\"]);\n        }\n        if (!options.hasOwnProperty(\"roomHeight\")) {\n            options[\"roomHeight\"] = this._calculateRoomSize(this._height, options[\"cellHeight\"]);\n        }\n        this._options = options;\n    }\n    create(callback) {\n        this.map = this._fillMap(1);\n        this.rooms = [];\n        this.connectedCells = [];\n        this._initRooms();\n        this._connectRooms();\n        this._connectUnconnectedRooms();\n        this._createRandomRoomConnections();\n        this._createRooms();\n        this._createCorridors();\n        if (callback) {\n            for (let i = 0; i < this._width; i++) {\n                for (let j = 0; j < this._height; j++) {\n                    callback(i, j, this.map[i][j]);\n                }\n            }\n        }\n        return this;\n    }\n    _calculateRoomSize(size, cell) {\n        let max = Math.floor((size / cell) * 0.8);\n        let min = Math.floor((size / cell) * 0.25);\n        if (min < 2) {\n            min = 2;\n        }\n        if (max < 2) {\n            max = 2;\n        }\n        return [min, max];\n    }\n    _initRooms() {\n        // create rooms array. This is the \"grid\" list from the algo.\n        for (let i = 0; i < this._options.cellWidth; i++) {\n            this.rooms.push([]);\n            for (let j = 0; j < this._options.cellHeight; j++) {\n                this.rooms[i].push({ \"x\": 0, \"y\": 0, \"width\": 0, \"height\": 0, \"connections\": [], \"cellx\": i, \"celly\": j });\n            }\n        }\n    }\n    _connectRooms() {\n        //pick random starting grid\n        let cgx = RNG.getUniformInt(0, this._options.cellWidth - 1);\n        let cgy = RNG.getUniformInt(0, this._options.cellHeight - 1);\n        let idx;\n        let ncgx;\n        let ncgy;\n        let found = false;\n        let room;\n        let otherRoom;\n        let dirToCheck;\n        // find  unconnected neighbour cells\n        do {\n            //dirToCheck = [0, 1, 2, 3, 4, 5, 6, 7];\n            dirToCheck = [0, 2, 4, 6];\n            dirToCheck = RNG.shuffle(dirToCheck);\n            do {\n                found = false;\n                idx = dirToCheck.pop();\n                ncgx = cgx + DIRS[8][idx][0];\n                ncgy = cgy + DIRS[8][idx][1];\n                if (ncgx < 0 || ncgx >= this._options.cellWidth) {\n                    continue;\n                }\n                if (ncgy < 0 || ncgy >= this._options.cellHeight) {\n                    continue;\n                }\n                room = this.rooms[cgx][cgy];\n                if (room[\"connections\"].length > 0) {\n                    // as long as this room doesn't already coonect to me, we are ok with it.\n                    if (room[\"connections\"][0][0] == ncgx && room[\"connections\"][0][1] == ncgy) {\n                        break;\n                    }\n                }\n                otherRoom = this.rooms[ncgx][ncgy];\n                if (otherRoom[\"connections\"].length == 0) {\n                    otherRoom[\"connections\"].push([cgx, cgy]);\n                    this.connectedCells.push([ncgx, ncgy]);\n                    cgx = ncgx;\n                    cgy = ncgy;\n                    found = true;\n                }\n            } while (dirToCheck.length > 0 && found == false);\n        } while (dirToCheck.length > 0);\n    }\n    _connectUnconnectedRooms() {\n        //While there are unconnected rooms, try to connect them to a random connected neighbor\n        //(if a room has no connected neighbors yet, just keep cycling, you'll fill out to it eventually).\n        let cw = this._options.cellWidth;\n        let ch = this._options.cellHeight;\n        this.connectedCells = RNG.shuffle(this.connectedCells);\n        let room;\n        let otherRoom;\n        let validRoom;\n        for (let i = 0; i < this._options.cellWidth; i++) {\n            for (let j = 0; j < this._options.cellHeight; j++) {\n                room = this.rooms[i][j];\n                if (room[\"connections\"].length == 0) {\n                    let directions = [0, 2, 4, 6];\n                    directions = RNG.shuffle(directions);\n                    validRoom = false;\n                    do {\n                        let dirIdx = directions.pop();\n                        let newI = i + DIRS[8][dirIdx][0];\n                        let newJ = j + DIRS[8][dirIdx][1];\n                        if (newI < 0 || newI >= cw || newJ < 0 || newJ >= ch) {\n                            continue;\n                        }\n                        otherRoom = this.rooms[newI][newJ];\n                        validRoom = true;\n                        if (otherRoom[\"connections\"].length == 0) {\n                            break;\n                        }\n                        for (let k = 0; k < otherRoom[\"connections\"].length; k++) {\n                            if (otherRoom[\"connections\"][k][0] == i && otherRoom[\"connections\"][k][1] == j) {\n                                validRoom = false;\n                                break;\n                            }\n                        }\n                        if (validRoom) {\n                            break;\n                        }\n                    } while (directions.length);\n                    if (validRoom) {\n                        room[\"connections\"].push([otherRoom[\"cellx\"], otherRoom[\"celly\"]]);\n                    }\n                    else {\n                        console.log(\"-- Unable to connect room.\");\n                    }\n                }\n            }\n        }\n    }\n    _createRandomRoomConnections() {\n        // Empty for now.\n    }\n    _createRooms() {\n        let w = this._width;\n        let h = this._height;\n        let cw = this._options.cellWidth;\n        let ch = this._options.cellHeight;\n        let cwp = Math.floor(this._width / cw);\n        let chp = Math.floor(this._height / ch);\n        let roomw;\n        let roomh;\n        let roomWidth = this._options[\"roomWidth\"];\n        let roomHeight = this._options[\"roomHeight\"];\n        let sx;\n        let sy;\n        let otherRoom;\n        for (let i = 0; i < cw; i++) {\n            for (let j = 0; j < ch; j++) {\n                sx = cwp * i;\n                sy = chp * j;\n                if (sx == 0) {\n                    sx = 1;\n                }\n                if (sy == 0) {\n                    sy = 1;\n                }\n                roomw = RNG.getUniformInt(roomWidth[0], roomWidth[1]);\n                roomh = RNG.getUniformInt(roomHeight[0], roomHeight[1]);\n                if (j > 0) {\n                    otherRoom = this.rooms[i][j - 1];\n                    while (sy - (otherRoom[\"y\"] + otherRoom[\"height\"]) < 3) {\n                        sy++;\n                    }\n                }\n                if (i > 0) {\n                    otherRoom = this.rooms[i - 1][j];\n                    while (sx - (otherRoom[\"x\"] + otherRoom[\"width\"]) < 3) {\n                        sx++;\n                    }\n                }\n                let sxOffset = Math.round(RNG.getUniformInt(0, cwp - roomw) / 2);\n                let syOffset = Math.round(RNG.getUniformInt(0, chp - roomh) / 2);\n                while (sx + sxOffset + roomw >= w) {\n                    if (sxOffset) {\n                        sxOffset--;\n                    }\n                    else {\n                        roomw--;\n                    }\n                }\n                while (sy + syOffset + roomh >= h) {\n                    if (syOffset) {\n                        syOffset--;\n                    }\n                    else {\n                        roomh--;\n                    }\n                }\n                sx = sx + sxOffset;\n                sy = sy + syOffset;\n                this.rooms[i][j][\"x\"] = sx;\n                this.rooms[i][j][\"y\"] = sy;\n                this.rooms[i][j][\"width\"] = roomw;\n                this.rooms[i][j][\"height\"] = roomh;\n                for (let ii = sx; ii < sx + roomw; ii++) {\n                    for (let jj = sy; jj < sy + roomh; jj++) {\n                        this.map[ii][jj] = 0;\n                    }\n                }\n            }\n        }\n    }\n    _getWallPosition(aRoom, aDirection) {\n        let rx;\n        let ry;\n        let door;\n        if (aDirection == 1 || aDirection == 3) {\n            rx = RNG.getUniformInt(aRoom[\"x\"] + 1, aRoom[\"x\"] + aRoom[\"width\"] - 2);\n            if (aDirection == 1) {\n                ry = aRoom[\"y\"] - 2;\n                door = ry + 1;\n            }\n            else {\n                ry = aRoom[\"y\"] + aRoom[\"height\"] + 1;\n                door = ry - 1;\n            }\n            this.map[rx][door] = 0; // i'm not setting a specific 'door' tile value right now, just empty space.\n        }\n        else {\n            ry = RNG.getUniformInt(aRoom[\"y\"] + 1, aRoom[\"y\"] + aRoom[\"height\"] - 2);\n            if (aDirection == 2) {\n                rx = aRoom[\"x\"] + aRoom[\"width\"] + 1;\n                door = rx - 1;\n            }\n            else {\n                rx = aRoom[\"x\"] - 2;\n                door = rx + 1;\n            }\n            this.map[door][ry] = 0; // i'm not setting a specific 'door' tile value right now, just empty space.\n        }\n        return [rx, ry];\n    }\n    _drawCorridor(startPosition, endPosition) {\n        let xOffset = endPosition[0] - startPosition[0];\n        let yOffset = endPosition[1] - startPosition[1];\n        let xpos = startPosition[0];\n        let ypos = startPosition[1];\n        let tempDist;\n        let xDir;\n        let yDir;\n        let move; // 2 element array, element 0 is the direction, element 1 is the total value to move.\n        let moves = []; // a list of 2 element arrays\n        let xAbs = Math.abs(xOffset);\n        let yAbs = Math.abs(yOffset);\n        let percent = RNG.getUniform(); // used to split the move at different places along the long axis\n        let firstHalf = percent;\n        let secondHalf = 1 - percent;\n        xDir = xOffset > 0 ? 2 : 6;\n        yDir = yOffset > 0 ? 4 : 0;\n        if (xAbs < yAbs) {\n            // move firstHalf of the y offset\n            tempDist = Math.ceil(yAbs * firstHalf);\n            moves.push([yDir, tempDist]);\n            // move all the x offset\n            moves.push([xDir, xAbs]);\n            // move sendHalf of the  y offset\n            tempDist = Math.floor(yAbs * secondHalf);\n            moves.push([yDir, tempDist]);\n        }\n        else {\n            //  move firstHalf of the x offset\n            tempDist = Math.ceil(xAbs * firstHalf);\n            moves.push([xDir, tempDist]);\n            // move all the y offset\n            moves.push([yDir, yAbs]);\n            // move secondHalf of the x offset.\n            tempDist = Math.floor(xAbs * secondHalf);\n            moves.push([xDir, tempDist]);\n        }\n        this.map[xpos][ypos] = 0;\n        while (moves.length > 0) {\n            move = moves.pop();\n            while (move[1] > 0) {\n                xpos += DIRS[8][move[0]][0];\n                ypos += DIRS[8][move[0]][1];\n                this.map[xpos][ypos] = 0;\n                move[1] = move[1] - 1;\n            }\n        }\n    }\n    _createCorridors() {\n        // Draw Corridors between connected rooms\n        let cw = this._options.cellWidth;\n        let ch = this._options.cellHeight;\n        let room;\n        let connection;\n        let otherRoom;\n        let wall;\n        let otherWall;\n        for (let i = 0; i < cw; i++) {\n            for (let j = 0; j < ch; j++) {\n                room = this.rooms[i][j];\n                for (let k = 0; k < room[\"connections\"].length; k++) {\n                    connection = room[\"connections\"][k];\n                    otherRoom = this.rooms[connection[0]][connection[1]];\n                    // figure out what wall our corridor will start one.\n                    // figure out what wall our corridor will end on.\n                    if (otherRoom[\"cellx\"] > room[\"cellx\"]) {\n                        wall = 2;\n                        otherWall = 4;\n                    }\n                    else if (otherRoom[\"cellx\"] < room[\"cellx\"]) {\n                        wall = 4;\n                        otherWall = 2;\n                    }\n                    else if (otherRoom[\"celly\"] > room[\"celly\"]) {\n                        wall = 3;\n                        otherWall = 1;\n                    }\n                    else {\n                        wall = 1;\n                        otherWall = 3;\n                    }\n                    this._drawCorridor(this._getWallPosition(room, wall), this._getWallPosition(otherRoom, otherWall));\n                }\n            }\n        }\n    }\n}\n", "import Arena from \"./arena.js\";\nimport Uniform from \"./uniform.js\";\nimport Cellular from \"./cellular.js\";\nimport Digger from \"./digger.js\";\nimport EllerMaze from \"./ellermaze.js\";\nimport DividedMaze from \"./dividedmaze.js\";\nimport IceyMaze from \"./iceymaze.js\";\nimport Rogue from \"./rogue.js\";\nexport default { Arena, Uniform, Cellular, Digger, EllerMaze, DividedMaze, IceyMaze, Rogue };\n", "/**\n * Base noise generator\n */\nexport default class Noise {\n}\n", "import Noise from \"./noise.js\";\nimport RNG from \"../rng.js\";\nimport { mod } from \"../util.js\";\nconst F2 = 0.5 * (Math.sqrt(3) - 1);\nconst G2 = (3 - Math.sqrt(3)) / 6;\n/**\n * A simple 2d implementation of simplex noise by Ondrej Zara\n *\n * Based on a speed-improved simplex noise algorithm for 2D, 3D and 4D in Java.\n * Which is based on example code by Stefan Gustavson (stegu@itn.liu.se).\n * With Optimisations by Peter Eastman (peastman@drizzle.stanford.edu).\n * Better rank ordering method by Stefan Gustavson in 2012.\n */\nexport default class Simplex extends Noise {\n    /**\n     * @param gradients Random gradients\n     */\n    constructor(gradients = 256) {\n        super();\n        this._gradients = [\n            [0, -1],\n            [1, -1],\n            [1, 0],\n            [1, 1],\n            [0, 1],\n            [-1, 1],\n            [-1, 0],\n            [-1, -1]\n        ];\n        let permutations = [];\n        for (let i = 0; i < gradients; i++) {\n            permutations.push(i);\n        }\n        permutations = RNG.shuffle(permutations);\n        this._perms = [];\n        this._indexes = [];\n        for (let i = 0; i < 2 * gradients; i++) {\n            this._perms.push(permutations[i % gradients]);\n            this._indexes.push(this._perms[i] % this._gradients.length);\n        }\n    }\n    get(xin, yin) {\n        let perms = this._perms;\n        let indexes = this._indexes;\n        let count = perms.length / 2;\n        let n0 = 0, n1 = 0, n2 = 0, gi; // Noise contributions from the three corners\n        // Skew the input space to determine which simplex cell we're in\n        let s = (xin + yin) * F2; // Hairy factor for 2D\n        let i = Math.floor(xin + s);\n        let j = Math.floor(yin + s);\n        let t = (i + j) * G2;\n        let X0 = i - t; // Unskew the cell origin back to (x,y) space\n        let Y0 = j - t;\n        let x0 = xin - X0; // The x,y distances from the cell origin\n        let y0 = yin - Y0;\n        // For the 2D case, the simplex shape is an equilateral triangle.\n        // Determine which simplex we are in.\n        let i1, j1; // Offsets for second (middle) corner of simplex in (i,j) coords\n        if (x0 > y0) {\n            i1 = 1;\n            j1 = 0;\n        }\n        else { // lower triangle, XY order: (0,0)->(1,0)->(1,1)\n            i1 = 0;\n            j1 = 1;\n        } // upper triangle, YX order: (0,0)->(0,1)->(1,1)\n        // A step of (1,0) in (i,j) means a step of (1-c,-c) in (x,y), and\n        // a step of (0,1) in (i,j) means a step of (-c,1-c) in (x,y), where\n        // c = (3-sqrt(3))/6\n        let x1 = x0 - i1 + G2; // Offsets for middle corner in (x,y) unskewed coords\n        let y1 = y0 - j1 + G2;\n        let x2 = x0 - 1 + 2 * G2; // Offsets for last corner in (x,y) unskewed coords\n        let y2 = y0 - 1 + 2 * G2;\n        // Work out the hashed gradient indices of the three simplex corners\n        let ii = mod(i, count);\n        let jj = mod(j, count);\n        // Calculate the contribution from the three corners\n        let t0 = 0.5 - x0 * x0 - y0 * y0;\n        if (t0 >= 0) {\n            t0 *= t0;\n            gi = indexes[ii + perms[jj]];\n            let grad = this._gradients[gi];\n            n0 = t0 * t0 * (grad[0] * x0 + grad[1] * y0);\n        }\n        let t1 = 0.5 - x1 * x1 - y1 * y1;\n        if (t1 >= 0) {\n            t1 *= t1;\n            gi = indexes[ii + i1 + perms[jj + j1]];\n            let grad = this._gradients[gi];\n            n1 = t1 * t1 * (grad[0] * x1 + grad[1] * y1);\n        }\n        let t2 = 0.5 - x2 * x2 - y2 * y2;\n        if (t2 >= 0) {\n            t2 *= t2;\n            gi = indexes[ii + 1 + perms[jj + 1]];\n            let grad = this._gradients[gi];\n            n2 = t2 * t2 * (grad[0] * x2 + grad[1] * y2);\n        }\n        // Add contributions from each corner to get the final noise value.\n        // The result is scaled to return values in the interval [-1,1].\n        return 70 * (n0 + n1 + n2);\n    }\n}\n", "import Simplex from \"./simplex.js\";\nexport default { Simplex };\n", "import { DIRS } from \"../constants.js\";\n/**\n * @class Abstract pathfinder\n * @param {int} toX Target X coord\n * @param {int} toY Target Y coord\n * @param {function} passableCallback Callback to determine map passability\n * @param {object} [options]\n * @param {int} [options.topology=8]\n */\nexport default class Path {\n    constructor(toX, toY, passableCallback, options = {}) {\n        this._toX = toX;\n        this._toY = toY;\n        this._passableCallback = passableCallback;\n        this._options = Object.assign({\n            topology: 8\n        }, options);\n        this._dirs = DIRS[this._options.topology];\n        if (this._options.topology == 8) { /* reorder dirs for more aesthetic result (vertical/horizontal first) */\n            this._dirs = [\n                this._dirs[0],\n                this._dirs[2],\n                this._dirs[4],\n                this._dirs[6],\n                this._dirs[1],\n                this._dirs[3],\n                this._dirs[5],\n                this._dirs[7]\n            ];\n        }\n    }\n    _getNeighbors(cx, cy) {\n        let result = [];\n        for (let i = 0; i < this._dirs.length; i++) {\n            let dir = this._dirs[i];\n            let x = cx + dir[0];\n            let y = cy + dir[1];\n            if (!this._passableCallback(x, y)) {\n                continue;\n            }\n            result.push([x, y]);\n        }\n        return result;\n    }\n}\n", "import Path from \"./path.js\";\n/**\n * @class Simplified Dijkstra's algorithm: all edges have a value of 1\n * @augments ROT.Path\n * @see ROT.Path\n */\nexport default class Dijkstra extends Path {\n    constructor(toX, toY, passableCallback, options) {\n        super(toX, toY, passableCallback, options);\n        this._computed = {};\n        this._todo = [];\n        this._add(toX, toY, null);\n    }\n    /**\n     * Compute a path from a given point\n     * @see ROT.Path#compute\n     */\n    compute(fromX, fromY, callback) {\n        let key = fromX + \",\" + fromY;\n        if (!(key in this._computed)) {\n            this._compute(fromX, fromY);\n        }\n        if (!(key in this._computed)) {\n            return;\n        }\n        let item = this._computed[key];\n        while (item) {\n            callback(item.x, item.y);\n            item = item.prev;\n        }\n    }\n    /**\n     * Compute a non-cached value\n     */\n    _compute(fromX, fromY) {\n        while (this._todo.length) {\n            let item = this._todo.shift();\n            if (item.x == fromX && item.y == fromY) {\n                return;\n            }\n            let neighbors = this._getNeighbors(item.x, item.y);\n            for (let i = 0; i < neighbors.length; i++) {\n                let neighbor = neighbors[i];\n                let x = neighbor[0];\n                let y = neighbor[1];\n                let id = x + \",\" + y;\n                if (id in this._computed) {\n                    continue;\n                } /* already done */\n                this._add(x, y, item);\n            }\n        }\n    }\n    _add(x, y, prev) {\n        let obj = {\n            x: x,\n            y: y,\n            prev: prev\n        };\n        this._computed[x + \",\" + y] = obj;\n        this._todo.push(obj);\n    }\n}\n", "import Path from \"./path.js\";\n/**\n * @class Simplified A* algorithm: all edges have a value of 1\n * @augments ROT.Path\n * @see ROT.Path\n */\nexport default class AStar extends Path {\n    constructor(toX, toY, passableCallback, options = {}) {\n        super(toX, toY, passableCallback, options);\n        this._todo = [];\n        this._done = {};\n    }\n    /**\n     * Compute a path from a given point\n     * @see ROT.Path#compute\n     */\n    compute(fromX, fromY, callback) {\n        this._todo = [];\n        this._done = {};\n        this._fromX = fromX;\n        this._fromY = fromY;\n        this._add(this._toX, this._toY, null);\n        while (this._todo.length) {\n            let item = this._todo.shift();\n            let id = item.x + \",\" + item.y;\n            if (id in this._done) {\n                continue;\n            }\n            this._done[id] = item;\n            if (item.x == fromX && item.y == fromY) {\n                break;\n            }\n            let neighbors = this._getNeighbors(item.x, item.y);\n            for (let i = 0; i < neighbors.length; i++) {\n                let neighbor = neighbors[i];\n                let x = neighbor[0];\n                let y = neighbor[1];\n                let id = x + \",\" + y;\n                if (id in this._done) {\n                    continue;\n                }\n                this._add(x, y, item);\n            }\n        }\n        let item = this._done[fromX + \",\" + fromY];\n        if (!item) {\n            return;\n        }\n        while (item) {\n            callback(item.x, item.y);\n            item = item.prev;\n        }\n    }\n    _add(x, y, prev) {\n        let h = this._distance(x, y);\n        let obj = {\n            x: x,\n            y: y,\n            prev: prev,\n            g: (prev ? prev.g + 1 : 0),\n            h: h\n        };\n        /* insert into priority queue */\n        let f = obj.g + obj.h;\n        for (let i = 0; i < this._todo.length; i++) {\n            let item = this._todo[i];\n            let itemF = item.g + item.h;\n            if (f < itemF || (f == itemF && h < item.h)) {\n                this._todo.splice(i, 0, obj);\n                return;\n            }\n        }\n        this._todo.push(obj);\n    }\n    _distance(x, y) {\n        switch (this._options.topology) {\n            case 4:\n                return (Math.abs(x - this._fromX) + Math.abs(y - this._fromY));\n                break;\n            case 6:\n                let dx = Math.abs(x - this._fromX);\n                let dy = Math.abs(y - this._fromY);\n                return dy + Math.max(0, (dx - dy) / 2);\n                break;\n            case 8:\n                return Math.max(Math.abs(x - this._fromX), Math.abs(y - this._fromY));\n                break;\n        }\n    }\n}\n", "import Dijkstra from \"./dijkstra.js\";\nimport AStar from \"./astar.js\";\nexport default { Dijkstra, AStar };\n", "/**\n * @class Asynchronous main loop\n * @param {ROT.Scheduler} scheduler\n */\nexport default class Engine {\n    constructor(scheduler) {\n        this._scheduler = scheduler;\n        this._lock = 1;\n    }\n    /**\n     * Start the main loop. When this call returns, the loop is locked.\n     */\n    start() { return this.unlock(); }\n    /**\n     * Interrupt the engine by an asynchronous action\n     */\n    lock() {\n        this._lock++;\n        return this;\n    }\n    /**\n     * Resume execution (paused by a previous lock)\n     */\n    unlock() {\n        if (!this._lock) {\n            throw new Error(\"Cannot unlock unlocked engine\");\n        }\n        this._lock--;\n        while (!this._lock) {\n            let actor = this._scheduler.next();\n            if (!actor) {\n                return this.lock();\n            } /* no actors */\n            let result = actor.act();\n            if (result && result.then) { /* actor returned a \"thenable\", looks like a Promise */\n                this.lock();\n                result.then(this.unlock.bind(this));\n            }\n        }\n        return this;\n    }\n}\n", "import * as Color from \"./color.js\";\n;\n;\n;\n;\n/**\n * Lighting computation, based on a traditional FOV for multiple light sources and multiple passes.\n */\nexport default class Lighting {\n    constructor(reflectivityCallback, options = {}) {\n        this._reflectivityCallback = reflectivityCallback;\n        this._options = {};\n        options = Object.assign({\n            passes: 1,\n            emissionThreshold: 100,\n            range: 10\n        }, options);\n        this._lights = {};\n        this._reflectivityCache = {};\n        this._fovCache = {};\n        this.setOptions(options);\n    }\n    /**\n     * Adjust options at runtime\n     */\n    setOptions(options) {\n        Object.assign(this._options, options);\n        if (options && options.range) {\n            this.reset();\n        }\n        return this;\n    }\n    /**\n     * Set the used Field-Of-View algo\n     */\n    setFOV(fov) {\n        this._fov = fov;\n        this._fovCache = {};\n        return this;\n    }\n    /**\n     * Set (or remove) a light source\n     */\n    setLight(x, y, color) {\n        let key = x + \",\" + y;\n        if (color) {\n            this._lights[key] = (typeof (color) == \"string\" ? Color.fromString(color) : color);\n        }\n        else {\n            delete this._lights[key];\n        }\n        return this;\n    }\n    /**\n     * Remove all light sources\n     */\n    clearLights() { this._lights = {}; }\n    /**\n     * Reset the pre-computed topology values. Call whenever the underlying map changes its light-passability.\n     */\n    reset() {\n        this._reflectivityCache = {};\n        this._fovCache = {};\n        return this;\n    }\n    /**\n     * Compute the lighting\n     */\n    compute(lightingCallback) {\n        let doneCells = {};\n        let emittingCells = {};\n        let litCells = {};\n        for (let key in this._lights) { /* prepare emitters for first pass */\n            let light = this._lights[key];\n            emittingCells[key] = [0, 0, 0];\n            Color.add_(emittingCells[key], light);\n        }\n        for (let i = 0; i < this._options.passes; i++) { /* main loop */\n            this._emitLight(emittingCells, litCells, doneCells);\n            if (i + 1 == this._options.passes) {\n                continue;\n            } /* not for the last pass */\n            emittingCells = this._computeEmitters(litCells, doneCells);\n        }\n        for (let litKey in litCells) { /* let the user know what and how is lit */\n            let parts = litKey.split(\",\");\n            let x = parseInt(parts[0]);\n            let y = parseInt(parts[1]);\n            lightingCallback(x, y, litCells[litKey]);\n        }\n        return this;\n    }\n    /**\n     * Compute one iteration from all emitting cells\n     * @param emittingCells These emit light\n     * @param litCells Add projected light to these\n     * @param doneCells These already emitted, forbid them from further calculations\n     */\n    _emitLight(emittingCells, litCells, doneCells) {\n        for (let key in emittingCells) {\n            let parts = key.split(\",\");\n            let x = parseInt(parts[0]);\n            let y = parseInt(parts[1]);\n            this._emitLightFromCell(x, y, emittingCells[key], litCells);\n            doneCells[key] = 1;\n        }\n        return this;\n    }\n    /**\n     * Prepare a list of emitters for next pass\n     */\n    _computeEmitters(litCells, doneCells) {\n        let result = {};\n        for (let key in litCells) {\n            if (key in doneCells) {\n                continue;\n            } /* already emitted */\n            let color = litCells[key];\n            let reflectivity;\n            if (key in this._reflectivityCache) {\n                reflectivity = this._reflectivityCache[key];\n            }\n            else {\n                let parts = key.split(\",\");\n                let x = parseInt(parts[0]);\n                let y = parseInt(parts[1]);\n                reflectivity = this._reflectivityCallback(x, y);\n                this._reflectivityCache[key] = reflectivity;\n            }\n            if (reflectivity == 0) {\n                continue;\n            } /* will not reflect at all */\n            /* compute emission color */\n            let emission = [0, 0, 0];\n            let intensity = 0;\n            for (let i = 0; i < 3; i++) {\n                let part = Math.round(color[i] * reflectivity);\n                emission[i] = part;\n                intensity += part;\n            }\n            if (intensity > this._options.emissionThreshold) {\n                result[key] = emission;\n            }\n        }\n        return result;\n    }\n    /**\n     * Compute one iteration from one cell\n     */\n    _emitLightFromCell(x, y, color, litCells) {\n        let key = x + \",\" + y;\n        let fov;\n        if (key in this._fovCache) {\n            fov = this._fovCache[key];\n        }\n        else {\n            fov = this._updateFOV(x, y);\n        }\n        for (let fovKey in fov) {\n            let formFactor = fov[fovKey];\n            let result;\n            if (fovKey in litCells) { /* already lit */\n                result = litCells[fovKey];\n            }\n            else { /* newly lit */\n                result = [0, 0, 0];\n                litCells[fovKey] = result;\n            }\n            for (let i = 0; i < 3; i++) {\n                result[i] += Math.round(color[i] * formFactor);\n            } /* add light color */\n        }\n        return this;\n    }\n    /**\n     * Compute FOV (\"form factor\") for a potential light source at [x,y]\n     */\n    _updateFOV(x, y) {\n        let key1 = x + \",\" + y;\n        let cache = {};\n        this._fovCache[key1] = cache;\n        let range = this._options.range;\n        function cb(x, y, r, vis) {\n            let key2 = x + \",\" + y;\n            let formFactor = vis * (1 - r / range);\n            if (formFactor == 0) {\n                return;\n            }\n            cache[key2] = formFactor;\n        }\n        ;\n        this._fov.compute(x, y, range, cb.bind(this));\n        return cache;\n    }\n}\n", "export { default as RNG } from \"./rng.js\";\nexport { default as Display } from \"./display/display.js\";\nexport { default as StringGenerator } from \"./stringgenerator.js\";\nexport { default as EventQueue } from \"./eventqueue.js\";\nexport { default as Scheduler } from \"./scheduler/index.js\";\nexport { default as FOV } from \"./fov/index.js\";\nexport { default as Map } from \"./map/index.js\";\nexport { default as Noise } from \"./noise/index.js\";\nexport { default as Path } from \"./path/index.js\";\nexport { default as Engine } from \"./engine.js\";\nexport { default as Lighting } from \"./lighting.js\";\nexport { DEFAULT_WIDTH, DEFAULT_HEIGHT, DIRS, KEYS } from \"./constants.js\";\nimport * as util from \"./util.js\";\nexport const Util = util;\nimport * as color from \"./color.js\";\nexport const Color = color;\nimport * as text from \"./text.js\";\nexport const Text = text;\n"],
  "mappings": "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",
  "names": ["id", "fg", "bg", "part", "index", "token", "i", "id", "j", "w", "item", "id", "x", "y"]
}
